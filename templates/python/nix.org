* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
(import ./.).devShell.${builtins.currentSystem}
#+end_src

* default.nix

#+begin_src nix :tangle (meq/tangle-path)
(import
  (
    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
      sha256 = lock.nodes.flake-compat.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix
#+end_src

* .envrc

#+begin_src shell :tangle (meq/tangle-path) :shebang "#! /usr/bin/env nix-shell"
#! nix-shell -E "(import ./.).devShells.${builtins.currentSystem}.envrc"
#! nix-shell -i sh
files="<<current-file()>>"
if hash org-tangle 2> /dev/null; then
    org-tangle $files
else
    chmod +x ./settings/bin/* && ./settings/bin/org-tangle $files || :
fi

files="flake.nix"
for file in files; do
    [ -f "$file" ] && git add "$file" || :
done

nix flake info &> /dev/null && use flake || use nix
#+end_src

* makefile
:PROPERTIES:
:header-args:makefile+: :noweb-ref makefile-12345678-1234-1234-1234-123456789abc
:END:

#+begin_src text :tangle (meq/tangle-path)
<<makefile-12345678-1234-1234-1234-123456789abc>>
#+end_src

#+begin_src makefile
.RECIPEPREFIX := |
.DEFAULT_GOAL := test
#+end_src

Adapted from [[https://t-ravis.com/post/nix/nix-make/][here]]:

#+begin_src makefile
export PATH := $(shell nix-shell -E "(import ./.).devShells.$${builtins.currentSystem}.makefile")
#+end_src

Adapted from [[https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/][here]]:

#+begin_src makefile
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))
#+end_src

#+begin_src makefile
tangle:
|org-tangle $(mkfileDir)/src $(mkfileDir)/tests.org

test: tangle
|hy $(mkfileDir)/tests.hy
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{

    # TODO: Change the description!
    description = "";

    inputs = rec {
        settings = {
            url = github:sylvorg/settings;

            # TODO: Change the PNAME ONLY!
            inputs.pypkg-PNAME.follows = "";

        };
        nixpkgs.follows = "settings/nixpkgs";
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; let

        # TODO: Change the pname!
        pname = "";

        # TODO: Change the callPackage!
        callPackage = {}: {};

        overlayset = let
            overlay = j.update.python.callPython.three { inherit pname; } pname callPackage;
        in rec {
            overlays = settings.overlays // { default = overlay; "${pname}" = overlay; };
            inherit overlay;
            defaultOverlay = overlay;
        };
    in j.foldToSet [
        (eachSystem allSystems (system: let
            made = settings.make system (attrValues overlayset.overlays);
            python = made.mkPython made.pkgs.Python3 [] pname;
            xonsh = made.mkXonsh [] pname;
            hy = made.mkHy [] pname;
        in rec {
            inherit (settings) base;
            inherit (made) legacyPackages pkgs nixpkgs;
            packages = flattenTree {
                inherit python xonsh hy;
                "python-${pname}" = python;
                "xonsh-${pname}" = xonsh;
                "hy-${pname}" = hy;
                "${pname}" = python;
                default = python;
            };
            package = packages.default;
            defaultPackage = package;
            apps = mapAttrs (n: made.app) packages;
            app = apps.default;
            defaultApp = app;
            devShells = with pkgs; lib.j.foldToSet [
                (mapAttrs (n: v: mkShell { buildInputs = toList v; }) packages)
                (mapAttrs (n: v: mkShell { buildInputs = toList v; }) settings.buildInputs)
                {
                    default = mkShell { buildInputs = attrValues packages; };
                    makefile = mkShell {
                        buildInputs = [ settings ];
                        shellHook = ''
                            echo $PATH
                            exit
                        '';
                    };
                }
            ];
            devShell = devShells.default;
            defaultdevShell = devShell;
        }))
        overlayset
        { inherit pname callPackage; }
    ];
}
#+end_src
