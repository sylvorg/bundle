* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
(import ./.).devShell.${builtins.currentSystem}
#+end_src

* default.nix

#+begin_src nix :tangle (meq/tangle-path)
(import
  (
    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
      sha256 = lock.nodes.flake-compat.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix
#+end_src

* .envrc

#+begin_src shell :tangle (meq/tangle-path) :shebang "#! /usr/bin/env nix-shell"
#! nix-shell -E "(import ./.).devShells.${builtins.currentSystem}.envrc"
#! nix-shell -i sh
org-tangle nix.org
git add .
nix flake info &> /dev/null && use flake || use nix
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{

    # TODO: Change the description!
    description = "";

    inputs = rec {
        settings = {
            url = github:sylvorg/settings;

            # TODO: Change the PNAME ONLY!
            inputs.pypkg-PNAME.follows = "";

        };
        nixpkgs.follows = "settings/nixpkgs";
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; let

        # TODO: Change the pname!
        pname = "";

        # TODO: Change the callPackage!
        callPackage = {}: {};

        overlayset = let
            overlay = j.update.python.callPython.three { inherit pname; } pname callPackage;
        in rec {
            overlays = settings.overlays // { default = overlay; "${pname}" = overlay; };
            inherit overlay;
            defaultOverlay = overlay;
        };
    in j.foldToSet [
        (eachSystem allSystems (system: let
            made = settings.make system (attrValues overlayset.overlays);
            python = made.mkPython made.pkgs.Python3 [] pname;
            xonsh = settings.mkXonsh made.pkgs [] pname;
            hy = made.mkHy [] pname;
        in rec {
            inherit (made) legacyPackages pkgs nixpkgs;
            packages = flattenTree {
                inherit python xonsh hy;
                "python-${pname}" = python;
                "xonsh-${pname}" = xonsh;
                "hy-${pname}" = hy;
                "${pname}" = python;
                default = python;
            };
            package = packages.default;
            defaultPackage = package;
            apps = mapAttrs (n: made.app) packages;
            app = apps.default;
            defaultApp = app;
            devShells = j.foldToSet [
                (mapAttrs (n: v: pkgs.mkShell { buildInputs = toList v; }) packages)
                (mapAttrs (n: v: pkgs.mkShell { buildInputs = toList v; }) made.buildInputs)
                {
                    default = pkgs.mkShell { buildInputs = attrValues packages; };
                    makefile = made.mkfile.general [] [] null;
                    makefile-python = made.mkfile.python3 [] [] pname;
                }
            ];
            devShell = devShells.default;
            defaultdevShell = devShell;
        }))
        overlayset
        { inherit pname callPackage; }
    ];
}
#+end_src
