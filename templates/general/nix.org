* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
(import ./.).devShell.${builtins.currentSystem}
#+end_src

* default.nix

#+begin_src nix :tangle (meq/tangle-path)
(import
  (
    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
      sha256 = lock.nodes.flake-compat.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{

    # TODO: Change this!
    description = "";

    inputs = rec {
        settings = {
            url = github:sylvorg/settings;

            # TODO: Change the pname ONLY!
            inputs.pname.follows = "";

        };
        nixpkgs.follows = "settings/nixpkgs";
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; let

        # TODO: Change this!
        pname = "";

        # TODO: Change this!
        callPackage = {}: {};

        overlayset = let
            overlay = final: prev: { "${pname}" = final.callPackage callPackage {}; };
        in rec {
            overlays = settings.overlays // { default = overlay; "${pname}" = overlay; };
            overlay = overlays.default;
            defaultOverlay = overlay;
        };
    in j.foldToSet [
        (eachSystem allSystems (system: let
            made = make system (attrValues overlayset.overlays);
        in rec {
            inherit (made) legacyPackages pkgs nixpkgs;
            inherit made;
            packages = flattenTree { default = pkgs.${pname}; "${pname}" = pkgs.${pname}; };
            package = packages.default;
            defaultPackage = package;
            apps = mapAttrs (n: made.app) packages;
            app = apps.default;
            defaultApp = app;
            devShells = j.foldToSet [
                (mapAttrs (n: v: pkgs.mkShell { buildInputs = toList v; }) packages)
                (mapAttrs (n: v: pkgs.mkShell { buildInputs = toList v; }) made.buildInputs)
                (made.mkboth general [] [] pname)
                { default = pkgs.mkShell { buildInputs = attrValues packages; }; }
            ];
            devShell = devShells.default;
            defaultdevShell = devShell;
        }))
        overlayset
        { inherit pname callPackage; }
    ];
}
#+end_src
