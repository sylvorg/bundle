* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
with builtins; ((builtins.getFlake or import) (toString ./.)).devShell.${currentSystem}
#+end_src

* default.nix

#+begin_src nix :tangle (meq/tangle-path)
(import
  (
    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
      sha256 = lock.nodes.flake-compat.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{

    # TODO: Change this!
    description = "";

    inputs = rec {
        settings = {
            url = github:sylvorg/settings;

            # TODO: Change the pname ONLY!
            inputs.pname.follows = "";

        };
        # nixpkgs.follows = "settings/nixpkgs";
        nixpkgs.url = github:nixos/nixpkgs/nixos-22.05;
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; settings.mkOutputs {

        # TODO: Change this!
        pname = "";

        # TODO: Change this!
        callPackage = {}: {};
        
    };
}
#+end_src
