* General Properties and Settings
:PROPERTIES:
:header-args:text+: :results raw replace drawer :exports results
:ID:       c821137f-41fe-46e8-aeb6-bb288400d272
:CUSTOM_ID:       c821137f-41fe-46e8-aeb6-bb288400d272
:END:

If setting this up again, use ~C-c C-c~ on the results of the ~emacs-lisp~ code block; taken from [[https://emacs.stackexchange.com/users/91/mankoff][mankoff's]] answer [[https://emacs.stackexchange.com/a/60223/31428][here]]:

#+name: eedc8905-e04c-40d9-97c1-88b840473eaf
#+begin_src text
#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity #o444) :noweb yes :mkdirp yes
# #+property: header-args:emacs-lisp+ :comments both
#+end_src

#+RESULTS: eedc8905-e04c-40d9-97c1-88b840473eaf
:results:
#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity #o444) :noweb yes :mkdirp yes
# #+property: header-args:emacs-lisp+ :comments both
:end:

Adapted from [[https://stackoverflow.com/users/776405/whil][Whil's]] answer [[https://stackoverflow.com/a/65232183/10827766][here]]:

#+name: de0dd529-e632-4a70-b31b-8830795d51b7
#+begin_src text
#+startup: show3levels
#+end_src

#+RESULTS: de0dd529-e632-4a70-b31b-8830795d51b7
:results:
#+startup: show3levels
:end:

* HTML Export Options
:PROPERTIES:
:header-args:text+: :results raw replace drawer :exports results
:ID:       0ee9b692-e89d-46f4-9f34-bffa599bf068
:CUSTOM_ID:       0ee9b692-e89d-46f4-9f34-bffa599bf068
:END:

More options can be found [[https://orgmode.org/manual/Export-Settings.html][on the orgmode website]]:

#+name: 20220212070000334862280
#+begin_src text
#+options: num:nil html-style:nil pri:t
#+end_src

#+RESULTS: 20220212070000334862280
:results:
#+options: num:nil html-style:nil pri:t
:end:

** Mathjax

More ~mathjax~ options can be found [[https://orgmode.org/manual/Math-formatting-in-HTML-export.html][on the orgmode website]] and [[http://doc.endlessparentheses.com/Var/org-html-mathjax-options.html][doc.endlessparentheses.com]]:

#+name: 20220212070406770093600
#+begin_src text
#+html_mathjax: align: left indent: 5%
#+end_src

#+RESULTS: 20220212070406770093600
:results:
#+html_mathjax: align: left indent: 5%
:end:

** HTML Headers
:PROPERTIES:
:header-args:html+: :noweb-ref html-head
:END:

More ~html~ options can be found on the orgmode website:
- https://orgmode.org/manual/HTML-specific-export-settings.html
- https://orgmode.org/manual/Publishing-options.html#:~:text=HTML%20specific%20properties
- https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html#org2656e9f
- https://orgmode.org/guide/HTML-Export.html
- https://orgmode.org/manual/Quoting-HTML-tags.html

Adapted from [[https://raw.githubusercontent.com/alhassy/alhassy.github.io/master/AlBasmala.org#:~:text=HTML%2DPreamble%0A%20%20%3AEND%3A-,%23%2BBEGIN_SRC%20emacs%2Dlisp%20%3Aexports%20results%20%3Aresults%20raw%20replace%20drawer,-(s%2Djoin%20%22%5Cn][here]]:

#+begin_src hy :results raw replace drawer :exports results
(.join "\n" (gfor line (.split #[html-head[
<<html-head>>]html-head] "\n") (+ "#+html_head: " line)))
#+end_src

#+RESULTS:
:results:
#+html_head: <link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/primary/syvl.css" />
#+html_head: <link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.ico" sizes="any" />
#+html_head: <link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.svg" />
#+html_head: <link rel="manifest" href="https://combinatronics.com/sylvorg/settings/main/manifest.json" />
#+html_head: <link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+html_head: <script src="https://combinatronics.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+html_head: <script>hljs.highlightAll();</script>
#+html_head: <div class="header">
#+html_head: <h1>We Are Syvlorg.</h1>
#+html_head: <a href="">About Me</a>
#+html_head: <a href="">About This Website</a>
#+html_head: <a href="">About Syvlorg</a>
#+html_head: <a href="https://resume.syvl.org">Résumé</a>
#+html_head: <a href="https://index.syvl.org">Index</a>
#+html_head: </div>
:end:

*** Syvl Stylesheet

#+begin_src html
<link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/primary/syvl.css" />
#+end_src

*** Favicons

#+begin_src html
<link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.ico" sizes="any" />
<link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.svg" />
#+end_src

*** Manifest

#+begin_src html
<link rel="manifest" href="https://combinatronics.com/sylvorg/settings/main/manifest.json" />
#+end_src

*** Highlightjs

Check out more styles here: https://highlightjs.org/static/demo/
Favorites include:
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/gradient-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/kimbie-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/paraiso-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/base16/gruvbox-dark-hard.min.css

Unminify using [[https://unminify.com/][this]].

~Note:~ If just ~rel="stylesheet"~ and the ~href~ don't work, add ~type="text/css"~ as well.

Highlightjs theme for development:

#+begin_src html
<link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+end_src

Custom bundle of languages, built using the instructions from [[https://github.com/highlightjs/highlight.js/issues/3033#issuecomment-943846001][here]]:

#+begin_src sh
node tools/build.js -t browser bash css diff dockerfile hy ini json lisp makefile nim nix plaintext python xml yaml
#+end_src

Highlightjs for development:

#+begin_src html
<script src="https://combinatronics.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+end_src

#+begin_src html
<script>hljs.highlightAll();</script>
#+end_src

*** Header

#+begin_src html
<div class="header">
<h1>We Are Syvlorg.</h1>
#+end_src

**** About
***** Me

#+begin_src html
<a href="">About Me</a>
#+end_src

***** This Website

#+begin_src html
<a href="">About This Website</a>
#+end_src

***** Syvlorg

#+begin_src html
<a href="">About Syvlorg</a>
#+end_src

**** Résumé

#+begin_src html
<a href="https://resume.syvl.org">Résumé</a>
#+end_src

**** Index

#+begin_src html
<a href="https://index.syvl.org">Index</a>
#+end_src

**** End of Header

#+begin_src html
</div>
#+end_src

* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
let
    name = "14e3b35e-fb62-416d-95c8-36176656f06e";
    pkgs = import <nixpkgs> {};
    venv = "~/.local/nix-shells/${name}/venv";
    nvenv = "~/.local/nix-shells/${name}/nvenv";
in pkgs.mkShell rec {
    inherit name;
    buildInputs = with pkgs; [ python310 nodejs nodePackages.uglify-js sd ];
    nativeBuildInputs = buildInputs;
    shellHook = ''
        python3 -m venv ${venv}
        source ${venv}/bin/activate
        pip install --upgrade pip || :
        pip install nodeenv xonsh || :
        nodeenv ${nvenv}
        source ${nvenv}/bin/activate
        npm audit fix --force
        npm install command uglifycss
        exec xonsh
    '';
}
#+end_src

* manifest.json

Adapted from [[https://developer.mozilla.org/en-US/docs/Web/Manifest][here]] and [[https://css-tricks.com/svg-favicons-and-all-the-fun-things-we-can-do-with-them/][here]]:

#+begin_src json :tangle (meq/tangle-path)
{
  "$schema": "https://json.schemastore.org/web-manifest-combined.json",
  "name": "Syvl",
  "short_name": "Syvl",
  "start_url": ".",
  "display": "standalone",
  "description": "A readable Syvlorg.",
  "icons": [
    { "src": "https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola-192.png", "type": "image/png", "sizes": "192x192" },
    { "src": "https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola-512.png", "type": "image/png", "sizes": "512x512" }
  ]
}
#+end_src

* src
** icons
*** favicons

#+name: 256b3d05-4ba0-406f-9e96-61747a598915
#+begin_src emacs-lisp :var name="" gen="" shiny='t :eval never-export
(setq name-as-number (string-to-number name)
      icon (shell-command-to-string (concat "curl -fsSL https://raw.githubusercontent.com/<<username>>/svg-pokemon-sprites/main/icons/generation-"
                                            gen
                                            "/"
                                            (if (= name-as-number 0) "alphabetical" "ordered")
                                            "/"
                                            (if shiny "shiny" "regular")
                                            "/"
                                            name
                                            ".svg 2> /dev/null"))
      icon (if (string= icon "")
                    (with-temp-buffer (insert-file-contents (concat "./src/icons/favicons/"
                                                                    (if shiny "shiny-" "")
                                                                    theme ".svg"))
                                      (buffer-string))
                    icon))
#+end_src

**** shiny-sandshrew-alola.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="sandshrew-alola", gen="vii")>>
#+end_src

**** shiny-zigzagoon-galar.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="zigzagoon-galar", gen="viii")>>
#+end_src

**** shiny-linoone-galar.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="linoone-galar", gen="viii")>>
#+end_src

**** shiny-obstagoon.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="obstagoon", gen="viii")>>
#+end_src

** styles
*** primary
**** syvl.css
:PROPERTIES:
:header-args:css+: :noweb-ref syvl.css
:END:

Adapted from the following:
- [[https://github.com/jessekelly881/Rethink][rethink]]
- [[https://github.com/gongzhitaao/orgcss][orgcss]]
- [[https://gitlab.com/OlMon/org-themes][org-themes]]

~Note:~ More settings can be found [[https://orgmode.org/manual/CSS-support.html][here]].

#+begin_src text :tangle (meq/tangle-path) :exports none
<<syvl.css>>
#+end_src

#+begin_src css
/* @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro:200,300,400'); */

:root {
    --font-size-1: 2rem;
    --font-size-2: 1.5rem;
    --font-size-3: 1.25rem;
    --font-size-4: 1rem;
    --font-size-small: 0.5rem;
    --font-size-xsmall: 0.25rem;
    --margins: 5rem;
    --smaller-margins: 2.5rem;
    --padding: 1rem;
    --header-padding: 0.25rem;
    --background-color: #222222;
    --dracula-orange: #ffb86c;
    --exo-ui-red: #ff5156;
    --joker-purple: #be80ff;
    --acid-green: #DFFF00;
}

.header {
    text-align: center;
    background: var(--background-color);
    font-size: var(--font-size-3);
    border-bottom: 1px solid var(--dracula-orange);
    padding-bottom: var(--padding);
}

/* More information [[https://developer.mozilla.org/en-US/docs/Web/CSS/:not][here]]: */
.header>a:not(:last-child)::after {
    content: " |";
}

.header > a:link {
    color: var(--joker-purple);
    display: inline;
    text-decoration: none;
}

html,
body {
    background-color: var(--background-color);
    font-family: "Courier New", monospace;
    font-weight: 100;
    color: var(--joker-purple);
}

@media only screen and (min-width: 750px) /* Large screens */
{
    html,
    body {
        margin-left: var(--margins);
        margin-right: var(--margins);
    }
}

@media only screen and (max-width: 750px) /* Small screens */
{
    html,
    body {
        margin-left: var(--smaller-margins);
        margin-right: var(--smaller-margins);
    }
}

::selection {
    background-color: var(--dracula-orange);
    color: var(--background-color);
}

h1 {
    font-size: var(--font-size-1);
}

h2 {
    font-size: var(--font-size-2);
}

h1>.subtitle,
h3,
h4,
h5 {
    font-size: var(--font-size-3);
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-weight: 300;
    letter-spacing: -0.03em;
    color: var(--dracula-orange);
}

h2,
h3,
h4,
h5,
h6 {
    border-bottom: 1px solid var(--joker-purple);
    width: fit-content;
    padding-bottom: var(--header-padding);
}

#table-of-contents {
    padding-bottom: var(--padding);
    border-bottom: 1px solid var(--dracula-orange);
}

#table-of-contents ul,
#table-of-contents li {
    list-style-type: none;
    margin-top: var(--header-padding);
    margin-bottom: var(--header-padding);
}

#table-of-contents .tag {
    float: right;
}

#table-of-contents a:link {
    text-decoration: none;
    color: var(--joker-purple);
}

#table-of-contents a:hover {
    color: var(--exo-ui-red);
}

img {
    max-width: 100%;
}

blockquote {
    border-left: 0.2rem solid var(--dracula-orange);
    padding-left: 1rem;
    font-style: italic;
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
blockquote>p {
    color: var(--exo-ui-red);
}

p,
pre,
ol,
ul,
table,
code {
    color: var(--dracula-orange);
}

.done,
.priority,
.tag,
.todo,
code {
    color: var(--background-color);
    position: relative;
    bottom: .1rem;
    font-size: 80%;
}

.done,
.priority,
.todo,
code {
    font-weight: 400;
    background-clip: padding-box;
    font-family: "Courier New", monospace;
    font-weight: bold;
    line-height: 1
}

.done,
.priority,
.tag>span,
.todo,
code {
    border-radius: 3px;
    padding-top: .1rem;
    padding-left: .3rem;
    padding-right: .3rem;
    line-height: 1;
}

.priority,
.tag>span,
.todo,
code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--exo-ui-red));
}

td > code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

/* ~.on>code~ refers to a checkbox's checked state; ~.off>code~ refers to the opposite. */
.on>code,
.done {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

.tag {
    top: .1rem;
    display: block;
    float: right;
    font-weight: 550;
}

.tag>span {
    text-transform: uppercase;
}

table,
#table-of-contents {
    margin-bottom: var(--padding);
}

/* Even Table Row */

tr:nth-child(even) {
    background-color: #2f1e2e;
}

.org-org-meta-line,
.org-keyword {
    color: var(--dracula-orange);
}

a:link,
a:hover,
a:visited,
a:visited:hover {
    text-decoration: none;
}

a:link {
    color: var(--acid-green);
}

a:visited {
    color: var(--joker-purple);
}

/* Adapted from [[https://stackoverflow.com/users/3246606/harry-the-mad-lurker][Harry The Mad Lurker's]] answer [[https://stackoverflow.com/a/21977877/10827766][here]]: */
a:hover,
a:visited:hover {
    color: var(--exo-ui-red);
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
#postamble :not(:last-child)::after {
    content: " |";
}

#postamble>p {
    display: inline;
}

#postamble {
    text-align: center;
    width: 100%;
    font-size: var(--font-size-4)
}

.status {
    padding: var(--padding);
    border-top: 1px solid var(--dracula-orange);
    text-align: center;
}

.outline-text-2,
.outline-text-3,
.outline-text-4 {
    max-width: 100%;
    overflow-x: auto;
}

.underline {
    text-decoration: var(--exo-ui-red) wavy underline;
}

del {
    text-decoration: var(--joker-purple) wavy line-through;
}
#+end_src

*** highlight

Alpha levels for hex colors can be set using the guide [[https://www.digitalocean.com/community/tutorials/css-hex-code-colors-alpha-values][here]];
alpha hex codes can be found on [[https://stackoverflow.com/users/1048340/jared-rummler][Jared Rummler's]] answer [[https://stackoverflow.com/a/25170174][here]].

Regular expressions adapted from [[https://stackoverflow.com/users/4465/levik][levik's]] answer [[https://stackoverflow.com/a/159140][here]].

Peach gradient colorscheme can be found [[https://every-single-one-of-the-things.tumblr.com/post/186683107707/send-me-a-peach-part-of-a-collab-with][here]]:

| Color        | HEX     |
|--------------+---------|
| Tulip        | #F48191 |
| Dark Salmon  | #EF9188 |
| Tumbleweed   | #EDA58B |
| Peach-Orange | #F2BB9B |
| Apricot      | #FBCCB2 |

#+name: 20220207221553779604149
#+begin_src emacs-lisp :var theme="" base="" :eval never-export
(setq mini-theme (shell-command-to-string (concat "curl -fsSL https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/"
                                 (if (string= base "") "" (concat base "/"))
                                 theme
                                 ".min.css 2> /dev/null"))
      new-theme (if (string= mini-theme "")
                    (with-temp-buffer (insert-file-contents (concat "./src/styles/highlight/" theme ".min.css"))
                                      (buffer-string))
                    (thread-last mini-theme
                                 (replace-regexp-in-string "}.hljs{" "}.hljs{border-radius:0.2rem;")
                                 (replace-regexp-in-string "/\\*\\(.\\|\n\\)*?\\*/" ""))))
(pcase theme
       ("gradient-dark" (replace-regexp-in-string "background-image:linear-gradient.*?}"
                                                  "background-image:linear-gradient(160deg,#F48191,#EF9188,#EDA58B,#F2BB9B,#FBCCB2);color:#222222}"
                                                  new-theme))
       (t new-theme))
#+end_src

**** gradient-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="gradient-dark")>>
#+end_src

**** gruvbox-dark-hard.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="gruvbox-dark-hard", base="base16")>>
#+end_src

**** kimbie-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="kimbie-dark")>>
#+end_src

**** paraiso-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="paraiso-dark")>>
#+end_src

* bin
** org-export
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

Adapted from [[https://github.com/hlissner/doom-emacs/blob/master/bin/org-tangle][here]]:

#+begin_src emacs-lisp :tangle (meq/tangle-path) :shebang "#!/usr/bin/env sh"
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; bin/org-export

;; Exports blocks from org files. Debug/info messages are directed to stderr and
;; can be ignored.
;;
;;   -a/--all
;;     Export all blocks by default (unless it has :exports none set or a
;;     :noexport: tag)
;;   -t/--tag TAG
;;      --and TAG
;;      --or TAG
;;     Only include blocks in trees that have these tags. Combine multiple --and
;;     and --or's, or just use --tag (implicit --and).
;;   -p/--print
;;     Prints exported code to stdout instead of to files
;;
;; Usage: org-export some-file.org another.org
;; Examples:
;;   org-export -l sh modules/some/module/README.org > install_module.sh
;;   org-export -l sh modules/lang/go/README.org | sh
;;   org-export --and tagA --and tagB my/literate/config.org

(require 'cl-lib)
(require 'ox)
(require 'ox-html)
(load-file (concat (file-name-directory (or load-file-name buffer-file-name)) "org-export-functions.el"))

(setq debug-on-error t)

(defun usage ()
  (with-temp-buffer
    (insert (format "%s %s [OPTIONS] [TARGETS...]\n"
                    "[1mUsage:[0m"
                    (file-name-nondirectory load-file-name))
            "\n"
            "A command line interface for tangling org-mode files. TARGETS can be\n"
            "files or folders (which are searched for org files recursively).\n"
            "\n"
            "This is useful for literate configs that rely on command line\n"
            "workflows to build it.\n"
            "\n"
            "[1mExample:[0m\n"
            "  org-export some-file.org\n"
            "  org-export literate/config/\n"
            "  org-export -p -l sh scripts.org > do_something.sh\n"
            "  org-export -p -l python -t tagA -t tagB file.org | python\n"
            "\n"
            "[1mOptions:[0m\n"
            "  -a --all\t\tExport all blocks by default\n"
            "  -p --print\t\tPrint exported output to stdout than to files\n"
            "  -t --tag TAG\n"
            "     --and TAG\n"
            "     --or TAG\n"
            "    Lets you export org blocks by tag. You may have more than one\n"
            "    of these options.\n")
    (princ (buffer-string))))

(defun *org-babel-export (fn &rest args)
  "Don't write exported blocks to files, print them to stdout."
  (cl-letf (((symbol-function 'write-region)
             (lambda (start end filename &optional append visit lockname mustbenew)
               (princ (buffer-string)))))
    (apply fn args)))

(defvar all-blocks nil)
(defvar and-tags nil)
(defvar or-tags nil)
(let (srcs and-tags or-tags)
  (pop argv)
  (while argv
    (let ((arg (pop argv)))
      (pcase arg
        ((or "-h" "--help")
         (usage)
         (error ""))
        ((or "-a" "--all")
         (setq all-blocks t))
        ((or "-p" "--print")
         (advice-add #'org-html-export-to-html :around #'*org-babel-export))
        ((or "-t" "--tag" "--and")
         (push (pop argv) and-tags))
        ("--or"
         (push (pop argv) or-tags))
        ((guard (file-directory-p arg))
         (setq srcs
               (append (directory-files-recursively arg "\\.org$")
                       srcs)))
        ((guard (file-exists-p arg))
         (push arg srcs))
        (_ (error "Unknown option or file: %s" arg)))))

  (dolist (file srcs)
                (message (format "\n\nNow exporting %s:\n" file))
    (let ((backup (make-temp-file (file-name-base file) nil ".backup.org")))
      (unwind-protect
          ;; Prevent slow hooks from interfering
          (let (org-mode-hook org-confirm-babel-evaluate)
               (with-current-buffer (find-file-noselect file)
               (org-html-export-to-html)))
        (ignore-errors (delete-file backup)))))
  (kill-emacs 0))
#+end_src

** org-export-functions.el
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref org-export-functions.el
:END:

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L3471][here]], and inspired by [[https://stackoverflow.com/users/569280/ebpa][ebpa's]] answer [[https://stackoverflow.com/a/37404938][here]]:

#+begin_src text :tangle (meq/tangle-path) :exports none
<<org-export-functions.el>>
#+end_src

~Note:~ ~org-tangle-functions.el~ is required due to [[https://github.com/bzg/org-mode/blob/d2f4d4b457a9fe7a7dbcfbd2d71c723ffa8c2726/lisp/ob-core.el#L625][this]].

#+begin_src emacs-lisp
(setq org-export-functions-directory (file-name-directory (or load-file-name buffer-file-name))
      windows (member system-type '(windows-nt ms-dos)))
(defun meq/oefd (&rest args) (apply #'concat org-export-functions-directory (mapcar #'(lambda (arg) (concat (if windows "\\" "/") arg)) args)))
(load-file (meq/oefd "org-tangle-functions.el"))
#+end_src

Adapted from [[https://stackoverflow.com/users/3258545/amd][amd's]] answer [[https://stackoverflow.com/a/27158715/10827766][here]] (no longer used):

#+begin_src emacs-lisp :noweb-ref no
(require 'org-id)
(setq org-id-locations-file (meq/oefd ".org-id-locations")
      org-id-files (list load-file-name
                         buffer-file-name
                         (meq/oefd "README.org"))
      org-id-link-to-org-use-id t)
(org-id-update-id-locations)
#+end_src

~Note:~ From [[https://narkive.com/69IaWEJV:2.1599.178][here]]:

#+begin_quote
The value of the variable is saved to the file when emacs exits and when org-id-find is called and cannot find the id (I think),
or you eval ~(org-id-locations-save)~ explicitly.
#+end_quote

#+begin_src emacs-lisp
(defun meq/org-html-src-block (src-block _contents info)
  "Transcode a SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (if (org-export-read-attribute :attr_html src-block :textarea)
      (org-html--textarea-block src-block)
    (let* ((lang (org-element-property :language src-block))
           (lang (cond ((member lang '("emacs-lisp")) "lisp")
                       ((member lang '("shell" "zsh" "bash")) "sh")
                       ((member lang '("text")) "plaintext")
                       (t lang)))
           (code (org-html-format-code src-block info))
           (label (let ((lbl (org-html--reference src-block info t)))
                    (if lbl (format " id=\"%s\"" lbl) "")))
           (klipsify  (and  (plist-get info :html-klipsify-src)
                            (member lang '("javascript" "js"
                                           "ruby" "scheme" "clojure" "php" "html")))))
      (if (not lang) (format "<pre class=\"example\"%s>\n%s</pre>" label code)
        (format "<div class=\"org-src-container\">\n%s%s\n</div>"
                ;; Build caption.
                (let ((caption (org-export-get-caption src-block)))
                  (if (not caption) ""
                    (let ((listing-number
                           (format
                            "<span class=\"listing-number\">%s </span>"
                            (format
                             (org-html--translate "Listing %d:" info)
                             (org-export-get-ordinal
                              src-block info nil #'org-html--has-caption-p)))))
                      (format "<label class=\"org-src-name\">%s%s</label>"
                              listing-number
                              (org-trim (org-export-data caption info))))))
                ;; Contents.
                (if klipsify
                    (format "<pre><code class=\"src src-%s\"%s%s>%s</code></pre>"
                            lang
                            label
                            (if (string= lang "html")
                                " data-editor-type=\"html\""
                              "")
                            code)
                  (format "<pre><code class=\"language-%s match-braces rainbow-braces\"%s>%s</code></pre>"
                          lang label code)))))))
        (advice-add #'org-html-src-block :override #'meq/org-html-src-block)
#+end_src

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L2701][here]], and inspired by [[https://stackoverflow.com/users/569280/ebpa][ebpa's]] answer [[https://stackoverflow.com/a/37404938][here]]:

#+begin_src emacs-lisp
(defun meq/org-html-inline-src-block (inline-src-block _contents info)
  "Transcode an INLINE-SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (let* ((lang (org-element-property :language inline-src-block))
         (code (org-html-fontify-code
                (org-element-property :value inline-src-block)
                lang))
         (label
          (let ((lbl (org-html--reference inline-src-block info t)))
            (if (not lbl) "" (format " id=\"%s\"" lbl)))))
    (format "<code class=\"language-%s match-braces rainbow-braces\"%s>%s</code>" lang label code)))
(advice-add #'org-html-inline-src-block :override #'meq/org-html-inline-src-block)
#+end_src

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L2676][here]]:

#+begin_src emacs-lisp
(defun meq/org-html-format-headline-default-function
    (todo _todo-type priority text tags info)
  "Default format function for a headline.
See `org-html-format-headline-function' for details."
  (let ((todo (org-html--todo todo info))
        (priority (org-html--priority priority info))
        (tags (org-html--tags tags info)))
    (concat todo (and todo " ")
            priority (and priority " ")
            text
            (and tags "&#xa0;") tags)))
(advice-add #'org-html-format-headline-default-function :override #'meq/org-html-format-headline-default-function)
#+end_src

** org-tangle
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

Adapted from [[https://gnu.emacs.help.narkive.com/xdeUFCnw/double-backslash-problem-in-elisp#post2][here]]:

#+name: 20220211200359152893769
#+begin_src emacs-lisp :eval never-export
(setq doom-tangle (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/hlissner/doom-emacs/master/bin/org-tangle 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= doom-tangle "")
    (thread-first org-tangle-directory
                  (concat "org-tangle.sh")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    (thread-last doom-tangle
        (replace-regexp-in-string "(require 'ob-tangle)"
                                  (format (concat "(require 'ob-tangle)"
                                                  "\n"
                                                  "(load-file (concat %s \"org-tangle-functions.el\"))"
                                                  "\n"
                                                  ";; (setq org-id-locations-file (concat %s \".org-id-locations\"))")
                                          org-tangle-directory-function
                                          org-tangle-directory-function))
        (replace-regexp-in-string "(dolist (file srcs)" "(dolist (file srcs)\n\t\t(message (format \"\\\\n\\\\nNow tangling %s:\\\\n\" file))")
        (replace-regexp-in-string "(org-export-expand-include-keyword)" ";; (org-export-expand-include-keyword)")))
#+end_src

#+begin_src shell :tangle (meq/tangle-path)
<<20220211200359152893769()>>
#+end_src

** org-tangle-functions.el

The tangle functions are adapted from [[https://emacs.stackexchange.com/a/29884/31428][this answer on the emacs Stack Exchange]], written by [[https://emacs.stackexchange.com/users/2710/andrew-swann][Andrew Swann]]:

#+begin_src emacs-lisp :tangle (meq/tangle-path)
(eval-when-compile (require 'subr-x))

(defun meq/get-header nil (interactive)
    (nth 4 (org-heading-components)))
(defun meq/tangle-path nil (interactive)
    (string-remove-prefix "/" (concat
        (org-format-outline-path (org-get-outline-path)) "/"
            (meq/get-header))))
(defun meq/get-theme-from-header nil (interactive)
    (string-remove-suffix "-theme.el" (meq/get-header)))
(defun meq/tangle-on-relay nil (interactive)
    (if (member (system-name) '(<<relays>>)) meq/tangle-path "no"))

(let* ((README "settings/README.org")
        (file (cond
                ((file-exists-p README) README)
                ((file-exists-p (concat "home/.emacs.d/" README)) (concat "home/.emacs.d/" README))
                ((file-exists-p (concat "~/" README)) (concat "~/" README))
                ((file-exists-p (concat "~/.emacs.d/" README)) (concat "~/.emacs.d/" README))
                ((file-exists-p (concat "/" README)) (concat "/" README)))))
    (when file (org-babel-lob-ingest file)))
#+end_src

** org-interpreter
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref 101ff611-520c-4c0b-ad0c-01937a1250e5
:END:

#+begin_src text :tangle (meq/tangle-path) :shebang "#!/usr/bin/env sh" :exports none
<<101ff611-520c-4c0b-ad0c-01937a1250e5>>
#+end_src

Inspired by [[https://www.reddit.com/r/emacs/comments/t0yy91/comment/hycx6o2/?utm_source=share&utm_medium=web2x&context=3][this comment on reddit]].

~Note:~ For ~hy / hylang~ blocks, for print statements to work, you need to use ~:results silent output~,
as noted [[https://www.reddit.com/r/emacs/comments/t0yy91/comment/hyfkfhi/?utm_source=share&utm_medium=web2x&context=3][here]].
The two print statements you need to know are:

#+begin_src hy
(print "Hello, world!")
#+end_src

And:

#+begin_src hy
(import sys)
(.write sys.stdout "Hello, world!")
#+end_src

The former prints the output with a visible newline / carriage return, while the latter does not.

#+begin_src emacs-lisp
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
(pop argv)

(require 'org-element)

(defun require-lang (lang)
    (defvar bootstrap-version)
    (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
    (pcase (downcase lang)
        ((or "hy" "hylang") (use-package ob-hy :demand t :straight '(ob-hy :type git :host github :repo "allison-casey/ob-hy") :init (setq org-babel-hy-command "/usr/bin/env hy")))))

(defun message-advice (func &rest args) (interactive)
    (let* ((*message (apply #'format args)))
        (unless (or (string-prefix-p "executing" *message)
                    (string-prefix-p "Code block" *message))
            (apply func args))))
(advice-add #'message :around #'message-advice)

(defun org-babel-eval-error-notify-advice (exit-code stderr)
  "Open a buffer to display STDERR and a message with the value of EXIT-CODE."
  (let ((buf (get-buffer-create org-babel-error-buffer-name)))
    (with-current-buffer buf
      (goto-char (point-max))
      (save-excursion (insert stderr))
      (message (buffer-string)))
    (display-buffer buf))
  (message "Babel evaluation exited with code %S" exit-code))
(advice-add #'org-babel-eval-error-notify :override #'org-babel-eval-error-notify-advice)

(let ((org-confirm-babel-evaluate)
        (lang-list '()))
    (with-temp-buffer
        (while argv
            (let ((arg (pop argv)))
                (pcase arg
                    ((or "-l" "--languages")
                        (while (and (> (length argv) 1) (not (string-prefix-p "-" (car argv))))
                            (add-to-list 'lang-list (pop argv) t)))
                    (_ (setq file arg)))))
        (insert-file-contents file)
        (mapc 'require-lang lang-list)
#+end_src

Source [[https://github.com/bzg/org-mode/blob/main/lisp/ob-core.el#L1258][here]]:

#+begin_src emacs-lisp
        (org-babel-execute-buffer)))
#+end_src

* makefile

#+begin_src makefile :tangle (meq/tangle-path)
.RECIPEPREFIX := |
.DEFAULT_GOAL := super-push

# Adapted From: https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))
chmodBin := chmod +x $(mkfileDir)/bin/*

pre-init:
|-fd . $(mkfileDir)/.. -HIt d -t e -x rm -rf

tangle-setup:
|cp $(mkfileDir)/bin/org-tangle $(mkfileDir)/bin/backup-tangle
|$(chmodBin)

tangle: tangle-setup
|yes yes | fd . $(mkfileDir)/.. \
    -HId 1 -e org \
    -x $(mkfileDir)/bin/backup-tangle
|$(chmodBin)

pull: subinit
|git -C $(mkfileDir)/.. pull

add:
|git -C $(mkfileDir)/.. add .

commit:
|-git -C $(mkfileDir)/.. commit --allow-empty-message -am ""

cammit: pre-init add commit

push: cammit
|-git -C $(mkfileDir)/.. remote set-url --push origin git@github.com:<<username>>/$$(basename `git -C $(mkfileDir)/.. config --get remote.origin.url`)
|-git -C $(mkfileDir)/.. push 2>/dev/null || git -C $(mkfileDir)/.. push origin HEAD:$$(git -C $(mkfileDir)/.. remote show origin | grep "HEAD branch" | sed 's/.*: //')

push-me: tangle-setup
|yes yes | fd . $(mkfileDir) \
    -HId 1 -e org \
    -x $(mkfileDir)/bin/backup-tangle.sh
|-fd . $(mkfileDir) -HIt d -t e -x rm -rf
|git -C $(mkfileDir) add .
|-git -C $(mkfileDir) commit --allow-empty-message -am ""
|-git -C $(mkfileDir) remote set-url --push origin git@github.com:<<username>>/$$(basename `git -C $(mkfileDir) config --get remote.origin.url`)
|-git -C $(mkfileDir) push 2>/dev/null || git -C $(mkfileDir) push origin HEAD:$$(git -C $(mkfileDir) remote show origin | grep "HEAD branch" | sed 's/.*: //')

super-push: tangle push
#+end_src

* Addendum

These are just a few blocks I use regularly in my ~org~ files, whether in ~noweb~, naming, or otherwise:

#+name: username
#+begin_src text
shadowrylander
#+end_src

#+name: userhome
#+begin_src text
/home/<<username>>
#+end_src

#+name: reponame
#+begin_src text
aiern
#+end_src

#+name: email
#+begin_src text
titaniumfiles@outlook.com
#+end_src

#+name: hostname
#+begin_src emacs-lisp
(system-name)
#+end_src

#+name: extip
#+begin_src emacs-lisp
(shell-command-to-string "curl -fsSL ifconfig.me")
#+end_src

#+name: yadm-dir
#+begin_src text
.local/share/yadm
#+end_src

#+name: primary-distro
#+begin_src text
ubuntu
#+end_src

#+name: relays
#+begin_src text
"argus" "bastiodon"
#+end_src

#+name: no-zfs
#+begin_src text
"yggdrasil" "infinity"
#+end_src

# Adapted From: https://www.reddit.com/r/emacs/comments/4o9f0e/anyone_have_disabled_parts_of_their_config_being/d4apjey?utm_source=share&utm_medium=web2x&context=3

#+name: hash-deprecated
#+begin_src emacs-lisp :var name="" :tangle no
(md5 (concat (replace-regexp-in-string "/" "" (
    org-format-outline-path (org-get-outline-path))) (
        nth 4 (org-heading-components)) name))
#+end_src

#+name: hash
#+begin_src emacs-lisp :tangle no
(format-time-string "%Y%m%d%H%M%S%N")
#+end_src
