* General Properties and Settings
:PROPERTIES:
:header-args:text+: :results raw replace drawer :exports results
:ID:       c821137f-41fe-46e8-aeb6-bb288400d272
:CUSTOM_ID:       c821137f-41fe-46e8-aeb6-bb288400d272
:END:

If setting this up again, use ~C-c C-c~ on the results of the ~emacs-lisp~ code block; taken from [[https://emacs.stackexchange.com/users/91/mankoff][mankoff's]] answer [[https://emacs.stackexchange.com/a/60223/31428][here]]:

#+name: eedc8905-e04c-40d9-97c1-88b840473eaf
#+begin_src text
#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity #o444) :noweb yes :mkdirp yes
#+property: header-args:emacs-lisp+ :comments both
#+end_src

#+RESULTS: eedc8905-e04c-40d9-97c1-88b840473eaf
:results:
#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity #o444) :noweb yes :mkdirp yes
#+property: header-args:emacs-lisp+ :comments both
:end:

Adapted from [[https://stackoverflow.com/users/776405/whil][Whil's]] answer [[https://stackoverflow.com/a/65232183/10827766][here]]:

#+name: de0dd529-e632-4a70-b31b-8830795d51b7
#+begin_src text
#+startup: show3levels
#+end_src

#+RESULTS: de0dd529-e632-4a70-b31b-8830795d51b7
:results:
#+startup: show3levels
:end:

* HTML Export Options
:PROPERTIES:
:header-args:text+: :results raw replace drawer :exports results
:ID:       0ee9b692-e89d-46f4-9f34-bffa599bf068
:CUSTOM_ID:       0ee9b692-e89d-46f4-9f34-bffa599bf068
:END:

More options can be found [[https://orgmode.org/manual/Export-Settings.html][on the orgmode website]]:

#+name: 20220212070000334862280
#+begin_src text
#+options: num:nil html-style:nil pri:t
#+end_src

#+RESULTS: 20220212070000334862280
:results:
#+options: num:nil html-style:nil pri:t
:end:

** Mathjax

More ~mathjax~ options can be found [[https://orgmode.org/manual/Math-formatting-in-HTML-export.html][on the orgmode website]] and [[http://doc.endlessparentheses.com/Var/org-html-mathjax-options.html][doc.endlessparentheses.com]]:

#+name: 20220212070406770093600
#+begin_src text
#+html_mathjax: align: left indent: 5%
#+end_src

#+RESULTS: 20220212070406770093600
:results:
#+html_mathjax: align: left indent: 5%
:end:

** HTML Headers
:PROPERTIES:
:header-args:html+: :noweb-ref html-head
:END:

More ~html~ options can be found on the orgmode website:
- https://orgmode.org/manual/HTML-specific-export-settings.html
- https://orgmode.org/manual/Publishing-options.html#:~:text=HTML%20specific%20properties
- https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html#org2656e9f
- https://orgmode.org/guide/HTML-Export.html
- https://orgmode.org/manual/Quoting-HTML-tags.html

Adapted from [[https://raw.githubusercontent.com/alhassy/alhassy.github.io/master/AlBasmala.org#:~:text=HTML%2DPreamble%0A%20%20%3AEND%3A-,%23%2BBEGIN_SRC%20emacs%2Dlisp%20%3Aexports%20results%20%3Aresults%20raw%20replace%20drawer,-(s%2Djoin%20%22%5Cn][here]]:

#+begin_src hy :results raw replace drawer :exports results
(.join "\n" (gfor line (.split #[html-head[
<<html-head>>]html-head] "\n") (+ "#+html_head: " line)))
#+end_src

#+RESULTS:
:results:
#+html_head: <link rel="stylesheet" type="text/css" href="https://raw.githack.com/shadowrylander/settings/main/src/styles/primary/syvl.css" />
#+html_head: <link rel="icon" href="https://gitcdn.link/cdn/sylvorg/settings/main/src/icons/favicons/shiny-alolan-sandshrew.ico" sizes="any" />
#+html_head: <link rel="icon" href="https://gitcdn.link/cdn/sylvorg/settings/main/src/icons/favicons/shiny-alolan-sandshrew.svg" />
#+html_head: <link rel="manifest" href="https://raw.githack.com/sylvorg/settings/main/manifest.json" />
#+html_head: <link rel="stylesheet" type="text/css" href="https://raw.githack.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+html_head: <script src="https://raw.githack.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+html_head: <script>hljs.highlightAll();</script>
#+html_head: <div class="header">
#+html_head: <h1>We Are Syvlorg.</h1>
#+html_head: <a href="">About Me</a>
#+html_head: <a href="">About This Website</a>
#+html_head: <a href="">About Syvlorg</a>
#+html_head: <a href="https://resume.syvl.org">Résumé</a>
#+html_head: <a href="https://index.syvl.org">Index</a>
#+html_head: </div>
:end:

*** Syvl Stylesheet

For development:

#+begin_src html
<link rel="stylesheet" type="text/css" href="https://raw.githack.com/shadowrylander/settings/main/src/styles/primary/syvl.css" />
#+end_src

For production:

#+begin_src html :noweb-ref no
<link rel="stylesheet" type="text/css" href="https://rawcdn.githack.com/shadowrylander/settings/28f93432ef378d9abf0e0475c9a1699e02b8f5e0/src/styles/primary/syvl.css?min=1" />
#+end_src

*** Favicons

#+begin_src html
<link rel="icon" href="https://gitcdn.link/cdn/sylvorg/settings/main/src/icons/favicons/shiny-alolan-sandshrew.ico" sizes="any" />
<link rel="icon" href="https://gitcdn.link/cdn/sylvorg/settings/main/src/icons/favicons/shiny-alolan-sandshrew.svg" />
#+end_src

*** Manifest

For development:

#+begin_src html
<link rel="manifest" href="https://raw.githack.com/sylvorg/settings/main/manifest.json" />
#+end_src

For production:

#+begin_src html :noweb-ref no
<link rel="manifest" href="https://rawcdn.githack.com/sylvorg/settings/349aab51623410546fa06655ffb2b047be37cd12/manifest.json?min=1" />
#+end_src

*** Highlightjs

Check out more styles here: https://highlightjs.org/static/demo/
Favorites include:
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/gradient-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/kimbie-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/paraiso-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/base16/gruvbox-dark-hard.min.css

Unminify using [[https://unminify.com/][this]].

~Note:~ If just ~rel="stylesheet"~ and the ~href~ don't work, add ~type="text/css"~ as well.

Highlightjs theme for development:

#+begin_src html
<link rel="stylesheet" type="text/css" href="https://raw.githack.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+end_src

Highlightjs theme for production:

#+begin_src html :noweb-ref no
<link rel="stylesheet" type="text/css" href="https://gitcdn.link/cdn/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+end_src

Custom bundle of languages, built using the instructions from [[https://github.com/highlightjs/highlight.js/issues/3033#issuecomment-943846001][here]]:

#+begin_src sh
node tools/build.js -t browser bash css diff dockerfile hy ini json lisp makefile nim nix plaintext python xml yaml
#+end_src

Highlightjs for development:

#+begin_src html
<script src="https://raw.githack.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+end_src

Highlightjs for production:

#+begin_src html :noweb-ref no
<script src="https://gitcdn.link/cdn/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+end_src

#+begin_src html
<script>hljs.highlightAll();</script>
#+end_src

*** Header

#+begin_src html
<div class="header">
<h1>We Are Syvlorg.</h1>
#+end_src

**** About
***** Me

#+begin_src html
<a href="">About Me</a>
#+end_src

***** This Website

#+begin_src html
<a href="">About This Website</a>
#+end_src

***** Syvlorg

#+begin_src html
<a href="">About Syvlorg</a>
#+end_src

**** Résumé

#+begin_src html
<a href="https://resume.syvl.org">Résumé</a>
#+end_src

**** Index

#+begin_src html
<a href="https://index.syvl.org">Index</a>
#+end_src

**** End of Header

#+begin_src html
</div>
#+end_src

* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
let
    name = "20220208045252543083715";
    pkgs = import <nixpkgs> {};
    venv = "~/.local/nix-shells/${name}/venv";
    nvenv = "~/.local/nix-shells/${name}/nvenv";
in (pkgs.mkShell rec {
    inherit name;
    buildInputs = with pkgs; [ python310 nodejs nodePackages.uglify-js python310 sd ];
    nativeBuildInputs = buildInputs;
    shellHook = ''
        python3 -m venv ${venv}
        source ${venv}/bin/activate
        pip install --upgrade pip || :
        pip install nodeenv xonsh || :
        nodeenv ${nvenv}
        source ${nvenv}/bin/activate
        npm audit fix --force
        npm install command uglifycss
        exec xonsh
    '';
})
#+end_src

* manifest.json

Adapted from [[https://developer.mozilla.org/en-US/docs/Web/Manifest][here]] and [[https://css-tricks.com/svg-favicons-and-all-the-fun-things-we-can-do-with-them/][here]]:

#+begin_src json :tangle (meq/tangle-path)
{
  "$schema": "https://json.schemastore.org/web-manifest-combined.json",
  "name": "Syvl",
  "short_name": "Syvl",
  "start_url": ".",
  "display": "standalone",
  "description": "A readable Syvlorg.",
  "icons": [
    { "src": "https://gitcdn.link/cdn/sylvorg/settings/main/src/icons/favicons/shiny-alolan-sandshrew-192.png", "type": "image/png", "sizes": "192x192" },
    { "src": "https://gitcdn.link/cdn/sylvorg/settings/main/src/icons/favicons/shiny-alolan-sandshrew-512.png", "type": "image/png", "sizes": "512x512" }
  ]
}
#+end_src

* src
** icons
*** favicons

# TODO: Convert these to curling the source from the pokemon svg repo

**** shiny-alolan-sandshrew.svg

#+begin_src xml :tangle (meq/tangle-path)
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -0.5 68 56" shape-rendering="crispEdges">
<metadata>Made with Pixels to Svg https://codepen.io/shshaw/pen/XbxvNj</metadata>
<path stroke="#000000" d="M26 35h1M28 35h4M25 36h1M27 36h1M32 36h3M25 37h1M34 37h1M25 38h1M33 38h1M35 38h2M24 39h1M33 39h1M37 39h1M24 40h1M38 40h1M43 40h2M24 41h1M30 41h2M39 41h1M42 41h1M44 41h1M24 42h1M29 42h1M40 42h2M44 42h1M25 43h1M29 43h1M43 43h1M25 44h1M43 44h1M25 45h1M42 45h1M26 46h2M41 46h1M27 47h1M40 47h1M28 48h1M39 48h1M28 49h1M32 49h2M39 49h1M29 50h3M34 50h1M38 50h1M34 51h1M38 51h1M35 52h3" />
<path stroke="#c5e6f6" d="M26 36h1M29 36h1M27 37h4M28 38h1M31 38h1M25 39h1M30 39h1M36 39h1M34 40h1M36 40h2M33 41h3M37 41h1M25 42h1M28 42h1M33 42h1M35 42h4M42 42h1M26 43h2M34 43h2M38 43h1M40 43h2M38 44h1M41 44h2M34 45h1M38 45h2M41 45h1M34 46h2M39 46h1M38 47h1M38 48h1M34 49h1M37 49h1" />
<path stroke="#ffffff" d="M28 36h1M30 36h2M32 37h1M26 38h2M29 38h2M32 38h1M31 39h1M26 41h3M36 41h1M43 41h1M26 42h2M30 42h1M43 42h1M36 43h2M42 43h1M35 44h2M39 44h1M35 45h2M37 46h1M36 47h2M34 48h4M35 49h2M35 51h1M37 51h1" />
<path stroke="#7b94ac" d="M26 37h1M31 37h1M33 37h1M34 38h1M26 39h4M32 39h1M34 39h1M25 40h9M25 41h1M29 41h1M32 41h1M32 42h1M32 43h1M34 44h1M38 46h1M28 47h2M39 47h1M33 48h1M30 49h2M38 49h1M35 50h3" />
<path stroke="#414141" d="M35 39h1M35 40h1M38 41h1M34 42h1M39 42h1M33 43h1M39 43h1M31 44h2M37 44h1M40 44h1M29 45h2M33 45h1M37 45h1M40 45h1M28 46h2M33 46h1M36 46h1M40 46h1M30 47h1M34 47h2M29 48h3" />
<path stroke="#314183" d="M31 42h1M30 43h1" />
<path stroke="#7bbbe1" d="M28 43h1M31 43h1M26 44h5M27 45h1M31 47h3M32 48h1" />
<path stroke="#5696bc" d="M33 44h1M28 45h1M31 45h2M30 46h3" />
<path stroke="#7b7b7b" d="M26 45h1" />
<path stroke="#bdbdb4" d="M29 49h1M36 51h1" />
</svg>
#+end_src

**** shiny-galarian-zigzagoon.svg

#+begin_src xml :tangle (meq/tangle-path)
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -0.5 68 56" shape-rendering="crispEdges">
<metadata>Made with Pixels to Svg https://codepen.io/shshaw/pen/XbxvNj</metadata>
<path stroke="#000000" d="M41 37h2M32 38h2M36 38h2M40 38h1M42 38h1M27 39h1M29 39h1M31 39h1M34 39h2M37 39h1M39 39h1M43 39h2M26 40h1M28 40h1M30 40h1M38 40h1M44 40h1M26 41h1M45 41h1M45 42h1M25 43h1M44 43h1M25 44h1M42 44h1M25 45h1M41 45h1M24 46h1M40 46h1M24 47h1M40 47h1M24 48h1M37 48h1M40 48h1M25 49h1M36 49h1M25 50h1M28 50h3M34 50h1M25 51h1M30 51h1M33 51h1M26 52h1M31 52h2" />
<path stroke="#d10048" d="M41 38h1M36 39h1M40 39h2M32 40h2M32 41h1M44 42h1M40 43h1M35 44h1M40 44h1M34 45h2M40 45h1" />
<path stroke="#d5004d" d="M32 39h1" />
<path stroke="#bdbebd" d="M33 39h1M38 43h1M37 44h1M36 45h2M25 48h1M36 48h1" />
<path stroke="#313031" d="M42 39h1M44 41h1M26 49h1" />
<path stroke="#ffffff" d="M27 40h1M29 40h1M35 40h1M40 40h1M27 41h1M35 41h3M41 41h2M28 42h2M33 42h1M36 42h2M27 43h4M32 43h3M36 43h1M28 44h1M30 44h4M31 45h2M25 46h2M32 46h2M26 47h1M31 47h2M26 48h2M31 48h3M39 48h1M28 49h3" />
<path stroke="#d20049" d="M31 40h1M31 41h1M38 41h2" />
<path stroke="#c0bfc0" d="M34 40h1M30 42h1M37 43h1M30 45h1" />
<path stroke="#d00047" d="M36 40h2M42 40h2M43 41h1M38 42h2M39 43h1M36 44h1" />
<path stroke="#3c3e3c" d="M39 40h1M30 41h1" />
<path stroke="#c4003b" d="M41 40h1M40 41h1M35 46h1M34 47h2M32 50h2M32 51h1" />
<path stroke="#aaaaaa" d="M28 41h1" />
<path stroke="#ca0042" d="M29 41h1M25 47h1" />
<path stroke="#424142" d="M33 41h2M31 42h2M34 42h2M40 42h2M31 43h1M35 43h1M41 43h1M34 44h1M33 45h1M34 46h1M33 47h1M32 49h2" />
<path stroke="#080808" d="M26 42h1M43 43h1" />
<path stroke="#acacac" d="M27 42h1M26 43h1" />
<path stroke="#bcc3bc" d="M42 42h1M42 43h1" />
<path stroke="#444644" d="M43 42h1" />
<path stroke="#c7003e" d="M26 44h2M26 45h2" />
<path stroke="#c6003d" d="M29 44h1M28 45h2M27 46h1M30 46h2M30 47h1M28 48h1M30 48h1" />
<path stroke="#c0bec0" d="M38 44h1" />
<path stroke="#c90040" d="M39 44h1M38 45h2" />
<path stroke="#b5b6b5" d="M41 44h1" />
<path stroke="#00afb6" d="M28 46h1M28 47h1" />
<path stroke="#ffeeff" d="M29 46h1" />
<path stroke="#bdbfbd" d="M36 46h3M39 47h1" />
<path stroke="#be0034" d="M39 46h1M36 47h3" />
<path stroke="#a8a8a8" d="M27 47h1M29 48h1" />
<path stroke="#5de4e7" d="M29 47h1" />
<path stroke="#474347" d="M34 48h2" />
<path stroke="#aaabaa" d="M38 48h1" />
<path stroke="#bababa" d="M27 49h1" />
<path stroke="#c5c5c5" d="M31 49h1" />
<path stroke="#c6c3c6" d="M34 49h1" />
<path stroke="#090409" d="M35 49h1" />
<path stroke="#000400" d="M38 49h2" />
<path stroke="#229ea4" d="M26 50h1" />
<path stroke="#6cdde3" d="M27 50h1M26 51h1" />
<path stroke="#c8003f" d="M31 50h1" />
<path stroke="#090400" d="M27 51h1" />
<path stroke="#f6fbf6" d="M31 51h1" />
</svg>
#+end_src

**** shiny-galarian-linoone.svg

#+begin_src xml :tangle (meq/tangle-path)
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -0.5 68 56" shape-rendering="crispEdges">
<metadata>Made with Pixels to Svg https://codepen.io/shshaw/pen/XbxvNj</metadata>
<path stroke="#000000" d="M38 33h4M37 34h1M42 34h1M36 35h1M41 35h1M36 36h1M41 36h1M37 37h1M42 37h1M28 39h1M33 39h3M44 39h1M27 40h1M29 40h1M31 40h2M44 40h1M26 41h1M30 41h1M44 41h1M26 42h1M43 42h1M25 43h1M43 43h1M24 44h1M44 44h1M24 45h1M44 45h1M23 46h1M44 46h1M23 47h1M39 47h2M43 47h1M23 48h1M28 48h1M37 48h2M41 48h2M36 49h1M24 50h1M27 50h3M34 50h1M24 51h1M26 51h1M33 51h1M25 52h1M31 52h2" />
<path stroke="#c4aab1" d="M38 34h1M38 38h1M38 39h1M28 42h2M38 44h1M38 45h2M33 47h1M31 48h1M30 49h2" />
<path stroke="#ffffff" d="M39 34h3M38 35h2M38 36h3M39 37h3M40 38h2M36 39h2M40 39h3M28 40h1M33 40h3M40 40h3M27 41h2M31 41h1M39 41h4M27 42h1M33 42h1M38 42h4M26 43h1M32 43h2M35 43h5M30 44h4M28 45h4M24 46h1M24 47h2" />
<path stroke="#c7aab3" d="M37 35h1M25 44h1M25 48h1M34 48h2" />
<path stroke="#bea1a9" d="M40 35h1M32 41h1M27 43h1" />
<path stroke="#936e79" d="M37 36h1" />
<path stroke="#d00047" d="M38 37h1M38 40h2M43 40h1M38 41h1M43 41h1M25 46h1" />
<path stroke="#181818" d="M36 38h2" />
<path stroke="#ce0046" d="M39 38h1M39 39h1M28 43h2M39 44h1M25 45h1M32 46h2M32 47h1M30 48h1" />
<path stroke="#bea2a9" d="M42 38h1" />
<path stroke="#000400" d="M43 38h1M24 49h1M35 49h1" />
<path stroke="#cb0043" d="M43 39h1" />
<path stroke="#f6fbf6" d="M36 40h1" />
<path stroke="#a27f86" d="M37 40h1" />
<path stroke="#ca0042" d="M29 41h1M33 41h1M42 42h1M42 43h1" />
<path stroke="#946d79" d="M34 41h2M27 45h1M32 50h2" />
<path stroke="#c90040" d="M36 41h2" />
<path stroke="#d10048" d="M30 42h2M30 43h1M26 44h2M40 44h3M26 45h1M40 45h3" />
<path stroke="#424142" d="M32 42h1M31 43h1M43 44h1M43 45h1M26 47h2M36 48h1M32 49h2" />
<path stroke="#be0034" d="M34 42h2M34 43h1" />
<path stroke="#d20049" d="M36 42h1M41 43h1M28 44h1M33 45h1M38 46h1M40 46h2M38 47h1" />
<path stroke="#c0a5ab" d="M37 42h1M40 43h1M29 44h1M32 45h1" />
<path stroke="#c0a5ac" d="M34 44h1M30 46h1M37 46h1M34 47h1" />
<path stroke="#d5004d" d="M35 44h1M34 45h1M31 46h1M34 46h2M31 47h1M36 47h2" />
<path stroke="#393c39" d="M36 44h1" />
<path stroke="#f7f7f7" d="M37 44h1M27 46h1" />
<path stroke="#393839" d="M35 45h1M36 46h1M30 47h1M35 47h1" />
<path stroke="#c7b0b6" d="M36 45h2" />
<path stroke="#cab2b9" d="M26 46h1" />
<path stroke="#67394a" d="M28 46h2" />
<path stroke="#3c3e3c" d="M39 46h1M41 47h1M24 48h1M25 49h1M34 49h1" />
<path stroke="#3d3e3d" d="M42 46h1" />
<path stroke="#947078" d="M43 46h1" />
<path stroke="#ffeeff" d="M28 47h1" />
<path stroke="#9b7587" d="M29 47h1" />
<path stroke="#00b0b8" d="M42 47h1" />
<path stroke="#407072" d="M26 48h1" />
<path stroke="#00d9e1" d="M27 48h1" />
<path stroke="#3f3e3f" d="M29 48h1M29 49h1" />
<path stroke="#c3a9af" d="M32 48h2" />
<path stroke="#485652" d="M26 49h2" />
<path stroke="#97707c" d="M28 49h1" />
<path stroke="#009ca4" d="M25 50h1" />
<path stroke="#00d5dd" d="M26 50h1" />
<path stroke="#413e41" d="M30 50h2" />
<path stroke="#00dbe2" d="M25 51h1" />
<path stroke="#090409" d="M30 51h1" />
<path stroke="#00e8f0" d="M31 51h1" />
<path stroke="#00767b" d="M32 51h1" />
</svg>
#+end_src

**** shiny-obstagoon.svg

#+begin_src xml :tangle (meq/tangle-path)
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -0.5 68 56" shape-rendering="crispEdges">
<metadata>Made with Pixels to Svg https://codepen.io/shshaw/pen/XbxvNj</metadata>
<path stroke="#181818" d="M30 22h3M26 23h1M28 23h2M33 23h4M24 24h2M27 24h1M37 24h1M23 25h1M36 25h1M22 26h1M37 26h2M21 27h1M39 27h1M21 28h1M40 28h1M42 28h3M21 29h1M41 29h1M45 29h1M20 30h1M46 30h1M20 31h1M46 31h1M20 32h1M46 32h1M20 33h1M25 33h1M45 33h1M46 34h1M19 35h1M46 35h1M46 36h1M19 38h1M22 38h1M26 38h2M29 38h1M44 38h1M23 39h1M28 39h1M44 39h1M25 40h1M28 40h1M43 40h1M25 41h1M29 41h1M42 41h1M22 42h1M24 42h1M30 42h1M42 42h1M23 43h1M31 43h1M43 43h1M30 44h1M35 44h3M43 44h1M30 45h1M34 45h1M44 45h1M29 46h1M34 46h1M39 46h1M45 46h1M28 47h2M34 47h1M39 47h1M45 47h1M27 48h1M33 48h1M39 48h1M46 48h1M28 49h5M40 49h1M45 49h1M40 50h1M46 50h1M40 51h1M46 51h1M41 52h5" />
<path stroke="#c52550" d="M30 23h2M28 24h2M24 25h2M28 25h2M24 26h6M32 26h4M24 27h1M26 27h4M35 27h1M22 28h5M22 29h4M21 30h4M21 31h3M21 32h2M24 32h2M21 33h1M24 33h1" />
<path stroke="#c4244f" d="M32 23h1M26 24h1M30 24h2M33 24h4M26 25h1M30 25h1M32 25h2M30 26h2M22 27h1M29 30h1M22 34h2M22 35h1" />
<path stroke="#414041" d="M32 24h1M31 25h1M23 35h1" />
<path stroke="#6f1f35" d="M27 25h1M23 26h1M23 27h1M30 32h2M32 48h1" />
<path stroke="#424142" d="M34 25h2M40 30h1M43 30h1M30 31h1M43 31h1M38 32h1M42 32h1M38 33h1M28 34h1M29 35h1M32 35h1M41 35h1M40 36h1M40 46h3M30 47h1" />
<path stroke="#a82045" d="M36 26h1M36 27h2" />
<path stroke="#d37f99" d="M25 27h1" />
<path stroke="#313031" d="M30 27h2M28 30h1M32 30h1M32 31h1M26 32h1M38 34h1M39 35h1M28 36h1M30 36h1M32 36h3M39 36h1M29 37h3M35 37h1M39 37h1M36 38h1M37 39h1M35 40h2M38 40h2M34 41h1M40 41h2M31 42h5M39 42h1M36 43h3" />
<path stroke="#ffffff" d="M32 27h3M27 28h1M30 28h2M33 28h3M26 29h2M31 29h1M34 29h2M25 30h1M24 31h2M23 32h1M22 33h2M30 33h2M21 34h1M29 34h2M20 35h1M20 36h2M42 36h1M42 37h1" />
<path stroke="#a21a3f" d="M38 27h1M38 28h2M38 29h2M34 30h3M34 31h3M28 32h2M34 32h1M28 33h2M34 33h1M27 34h1M26 35h2M31 36h1M41 36h1M43 36h1M40 37h2M43 37h1M33 38h2M34 39h2M40 39h2M43 39h1M40 40h2M40 42h2M32 43h1M40 43h3M40 44h2M40 45h2" />
<path stroke="#f7f7f7" d="M28 28h1M26 30h1M19 36h1" />
<path stroke="#292829" d="M29 28h1M28 29h1" />
<path stroke="#393839" d="M32 28h1M32 29h2M36 34h1" />
<path stroke="#f7ffff" d="M36 28h1" />
<path stroke="#a31c40" d="M37 28h1M20 37h1M39 39h1M42 44h1M42 45h1" />
<path stroke="#0c92ae" d="M29 29h1" />
<path stroke="#32b8d4" d="M30 29h1M30 30h1M39 32h1M37 34h1M36 35h1M37 36h1M32 37h1M41 47h1" />
<path stroke="#cccccc" d="M36 29h2M33 30h1M37 30h2M33 31h1M37 31h2M35 32h2M33 33h1M35 33h2M32 34h2M28 35h1M31 35h1M33 35h2M22 36h1M27 36h1M21 37h1M20 38h1M40 38h4M42 39h1M42 40h1M34 43h2M33 44h2M38 44h1M33 45h1M39 45h1" />
<path stroke="#414241" d="M40 29h1M42 29h1M42 35h2M23 38h1M41 50h5" />
<path stroke="#34bad6" d="M43 29h2M44 32h2M44 33h1M38 35h1M34 40h1M44 46h1M41 51h1M43 51h1M45 51h1" />
<path stroke="#686768" d="M27 30h1M26 31h1" />
<path stroke="#c72752" d="M31 30h1M31 31h1" />
<path stroke="#9e163b" d="M39 30h1M39 31h1M32 44h1M32 45h1" />
<path stroke="#33b9d5" d="M41 30h2M44 30h2M40 31h3M44 31h2M40 32h2M43 32h1M41 33h3M31 38h2M31 39h3M32 40h2M43 46h1M42 47h2" />
<path stroke="#212021" d="M27 31h1" />
<path stroke="#a1193d" d="M28 31h2" />
<path stroke="#34edf0" d="M27 32h1M26 33h2M26 34h1" />
<path stroke="#9e173b" d="M32 32h2M32 33h1M23 36h1M22 37h2" />
<path stroke="#c62651" d="M37 32h1" />
<path stroke="#292429" d="M37 33h1" />
<path stroke="#169cb8" d="M39 33h1M40 47h1" />
<path stroke="#1197b3" d="M40 33h1M29 36h1M28 37h1M38 37h1M30 38h1M37 38h1M30 39h1M37 40h1M32 41h2M36 41h4M36 42h3" />
<path stroke="#101410" d="M20 34h1" />
<path stroke="#4aecef" d="M24 34h1" />
<path stroke="#082821" d="M25 34h1" />
<path stroke="#393c39" d="M31 34h1M30 35h1" />
<path stroke="#c2224d" d="M34 34h2" />
<path stroke="#1399b5" d="M39 34h1M42 34h2M35 36h1M36 37h1M35 41h1M40 48h2M44 48h2" />
<path stroke="#1298b4" d="M40 34h2M44 34h2M40 35h1M44 35h2M28 38h1M29 39h1M30 40h2M30 41h1M30 46h4M31 47h3M28 48h2M42 48h2" />
<path stroke="#cc2c57" d="M21 35h1" />
<path stroke="#324d4e" d="M24 35h2" />
<path stroke="#292021" d="M35 35h1" />
<path stroke="#014d5e" d="M37 35h1M36 36h1M37 37h1M29 40h1M31 41h1M42 51h1M44 51h1" />
<path stroke="#101010" d="M18 36h1M18 37h1" />
<path stroke="#174749" d="M24 36h1" />
<path stroke="#fff7ff" d="M25 36h1M24 37h1" />
<path stroke="#9f173c" d="M26 36h1M26 37h1" />
<path stroke="#474547" d="M38 36h1" />
<path stroke="#ae0e39" d="M44 36h1M44 37h1M41 49h1M44 49h1" />
<path stroke="#0f95b1" d="M45 36h1" />
<path stroke="#c82853" d="M19 37h1" />
<path stroke="#608384" d="M25 37h1" />
<path stroke="#100c08" d="M27 37h1" />
<path stroke="#a51d42" d="M33 37h1M36 39h1M39 43h1" />
<path stroke="#ff618c" d="M34 37h1" />
<path stroke="#181418" d="M45 37h1M20 39h2M22 40h1M22 41h1M38 45h1" />
<path stroke="#4f5154" d="M21 38h1" />
<path stroke="#5bc8cc" d="M24 38h1" />
<path stroke="#44797b" d="M25 38h1" />
<path stroke="#df3f6a" d="M35 38h1" />
<path stroke="#313131" d="M38 38h1M38 39h1" />
<path stroke="#413f41" d="M39 38h1" />
<path stroke="#71f2f4" d="M24 39h1M23 41h1" />
<path stroke="#081810" d="M25 39h1" />
<path stroke="#53cbcf" d="M23 40h1" />
<path stroke="#79f2f5" d="M24 40h1M24 41h1M23 42h1" />
<path stroke="#aa3e5b" d="M33 43h1" />
<path stroke="#9c1438" d="M31 44h1M31 48h1" />
<path stroke="#b56379" d="M39 44h1" />
<path stroke="#1096b2" d="M31 45h1M30 48h1" />
<path stroke="#3e3b3e" d="M43 45h1" />
<path stroke="#0a90ac" d="M44 47h1" />
<path stroke="#a82044" d="M42 49h2" />
</svg>
#+end_src

** styles
*** primary
**** syvl.css
:PROPERTIES:
:header-args:css+: :noweb-ref syvl.css
:END:

Adapted from the following:
- [[https://github.com/jessekelly881/Rethink][rethink]]
- [[https://github.com/gongzhitaao/orgcss][orgcss]]
- [[https://gitlab.com/OlMon/org-themes][org-themes]]

~Note:~ More settings can be found [[https://orgmode.org/manual/CSS-support.html][here]].

#+begin_src text :tangle (meq/tangle-path) :exports none
<<syvl.css>>
#+end_src

#+begin_src css
/* @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro:200,300,400'); */

:root {
    --font-size-1: 2rem;
    --font-size-2: 1.5rem;
    --font-size-3: 1.25rem;
    --font-size-4: 1rem;
    --font-size-small: 0.5rem;
    --font-size-xsmall: 0.25rem;
    --margins: 5rem;
    --smaller-margins: 2.5rem;
    --padding: 1rem;
    --header-padding: 0.25rem;
    --background-color: #222222;
    --dracula-orange: #ffb86c;
    --exo-ui-red: #ff5156;
    --joker-purple: #be80ff;
    --acid-green: #DFFF00;
}

.header {
    text-align: center;
    background: var(--background-color);
    font-size: var(--font-size-3);
    border-bottom: 1px solid var(--dracula-orange);
    padding-bottom: var(--padding);
}

/* More informatio [[https://developer.mozilla.org/en-US/docs/Web/CSS/:not][here]]: */
.header>a:not(:last-child)::after {
    content: " |";
}

.header > a:link {
    color: var(--joker-purple);
    display: inline;
    text-decoration: none;
}

html,
body {
    background-color: var(--background-color);
    font-family: "Courier New", monospace;
    font-weight: 100;
    color: var(--joker-purple);
}

@media only screen and (min-width: 750px) /* Large screens */
{
    html,
    body {
        margin-left: var(--margins);
        margin-right: var(--margins);
    }
}

@media only screen and (max-width: 750px) /* Small screens */
{
    html,
    body {
        margin-left: var(--smaller-margins);
        margin-right: var(--smaller-margins);
    }
}

::selection {
    background-color: var(--dracula-orange);
    color: var(--background-color);
}

h1 {
    font-size: var(--font-size-1);
}

h2 {
    font-size: var(--font-size-2);
}

h1>.subtitle,
h3,
h4,
h5 {
    font-size: var(--font-size-3);
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-weight: 300;
    letter-spacing: -0.03em;
    color: var(--dracula-orange);
}

h2,
h3,
h4,
h5,
h6 {
    border-bottom: 1px solid var(--joker-purple);
    width: fit-content;
    padding-bottom: var(--header-padding);
}

#table-of-contents {
    padding-bottom: var(--padding);
    border-bottom: 1px solid var(--dracula-orange);
}

#table-of-contents ul,
#table-of-contents li {
    list-style-type: none;
    margin-top: var(--header-padding);
    margin-bottom: var(--header-padding);
}

#table-of-contents .tag {
    float: right;
}

#table-of-contents a:link {
    text-decoration: none;
    color: var(--joker-purple);
}

#table-of-contents a:hover {
    color: var(--exo-ui-red);
}

img {
    max-width: 100%;
}

blockquote {
    border-left: 0.2rem solid var(--dracula-orange);
    padding-left: 1rem;
    font-style: italic;
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
blockquote>p {
    color: var(--exo-ui-red);
}

p,
pre,
ol,
ul,
table,
code {
    color: var(--dracula-orange);
}

.done,
.priority,
.tag,
.todo,
code {
    color: var(--background-color);
    position: relative;
    bottom: .1rem;
    font-size: 80%;
}

.done,
.priority,
.todo,
code {
    font-weight: 400;
    background-clip: padding-box;
    font-family: "Courier New", monospace;
    font-weight: bold;
    line-height: 1
}

.done,
.priority,
.tag>span,
.todo,
code {
    border-radius: 3px;
    padding-top: .1rem;
    padding-left: .3rem;
    padding-right: .3rem;
    line-height: 1;
}

.priority,
.tag>span,
.todo,
code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--exo-ui-red));
}

.on>code,
.done {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

.tag {
    top: .1rem;
    display: block;
    float: right;
    font-weight: 550;
}

.tag>span {
    text-transform: uppercase;
}

table,
#table-of-contents {
    margin-bottom: var(--padding);
}

/* Even Table Row */

tr:nth-child(even) {
    background-color: #2f1e2e;
}

.org-org-meta-line,
.org-keyword {
    color: var(--dracula-orange);
}

a:link,
a:hover,
a:visited,
a:visited:hover {
    text-decoration: none;
}

a:link {
    color: var(--acid-green);
}

a:visited {
    color: var(--joker-purple);
}

/* Adapted from [[https://stackoverflow.com/users/3246606/harry-the-mad-lurker][Harry The Mad Lurker's]] answer [[https://stackoverflow.com/a/21977877/10827766][here]]: */
a:hover,
a:visited:hover {
    color: var(--exo-ui-red);
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
#postamble :not(:last-child)::after {
    content: " |";
}

#postamble>p {
    display: inline;
}

#postamble {
    text-align: center;
    width: 100%;
    font-size: var(--font-size-4)
}

.status {
    padding: var(--padding);
    border-top: 1px solid var(--dracula-orange);
    text-align: center;
}

.outline-text-2,
.outline-text-3,
.outline-text-4 {
    max-width: 100%;
    overflow-x: auto;
}

.underline {
    text-decoration: var(--exo-ui-red) wavy underline;
}

del {
    text-decoration: var(--joker-purple) wavy line-through;
}
#+end_src

*** highlight

Alpha levels for hex colors can be set using the guide [[https://www.digitalocean.com/community/tutorials/css-hex-code-colors-alpha-values][here]];
alpha hex codes can be found on [[https://stackoverflow.com/users/1048340/jared-rummler][Jared Rummler's]] answer [[https://stackoverflow.com/a/25170174][here]].

Regular expressions adapted from [[https://stackoverflow.com/users/4465/levik][levik's]] answer [[https://stackoverflow.com/a/159140][here]].

Peach gradient colorscheme can be found [[https://every-single-one-of-the-things.tumblr.com/post/186683107707/send-me-a-peach-part-of-a-collab-with][here]]:

| Color        | HEX     |
|--------------+---------|
| Tulip        | #F48191 |
| Dark Salmon  | #EF9188 |
| Tumbleweed   | #EDA58B |
| Peach-Orange | #F2BB9B |
| Apricot      | #FBCCB2 |

#+name: 20220207221553779604149
#+begin_src emacs-lisp :var theme="" base="" :eval never-export
(setq mini-theme (shell-command-to-string (concat "curl -fsSL https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/"
                                 (if (string= base "") "" (concat base "/"))
                                 theme
                                 ".min.css 2> /dev/null"))
      new-theme (if (string= mini-theme "")
                    (with-temp-buffer (insert-file-contents (concat "./src/styles/highlight/" theme ".min.css"))
                                      (buffer-string))
                    (thread-last mini-theme
                                 (replace-regexp-in-string "}.hljs{" "}.hljs{border-radius:0.2rem;")
                                 (replace-regexp-in-string "/\\*\\(.\\|\n\\)*?\\*/" ""))))
(pcase theme
       ("gradient-dark" (replace-regexp-in-string "background-image:linear-gradient.*?}"
                                                  "background-image:linear-gradient(160deg,#F48191,#EF9188,#EDA58B,#F2BB9B,#FBCCB2);color:#222222}"
                                                  new-theme))
       (t new-theme))
#+end_src

**** gradient-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="gradient-dark")>>
#+end_src

**** gruvbox-dark-hard.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="gruvbox-dark-hard", base="base16")>>
#+end_src

**** kimbie-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="kimbie-dark")>>
#+end_src

**** paraiso-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="paraiso-dark")>>
#+end_src

* org-export.sh
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

Adapted from [[https://github.com/hlissner/doom-emacs/blob/master/bin/org-tangle][here]]:

#+begin_src emacs-lisp :tangle (meq/tangle-path) :shebang "#!/usr/bin/env sh"
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; bin/org-export

;; Exports blocks from org files. Debug/info messages are directed to stderr and
;; can be ignored.
;;
;;   -a/--all
;;     Export all blocks by default (unless it has :exports none set or a
;;     :noexport: tag)
;;   -t/--tag TAG
;;      --and TAG
;;      --or TAG
;;     Only include blocks in trees that have these tags. Combine multiple --and
;;     and --or's, or just use --tag (implicit --and).
;;   -p/--print
;;     Prints exported code to stdout instead of to files
;;
;; Usage: org-export some-file.org another.org
;; Examples:
;;   org-export -l sh modules/some/module/README.org > install_module.sh
;;   org-export -l sh modules/lang/go/README.org | sh
;;   org-export --and tagA --and tagB my/literate/config.org

(require 'cl-lib)
(require 'ox)
(require 'ox-html)
(load-file (concat (file-name-directory (or load-file-name buffer-file-name)) "org-export-functions.el"))

(setq debug-on-error t)

(defun usage ()
  (with-temp-buffer
    (insert (format "%s %s [OPTIONS] [TARGETS...]\n"
                    "[1mUsage:[0m"
                    (file-name-nondirectory load-file-name))
            "\n"
            "A command line interface for tangling org-mode files. TARGETS can be\n"
            "files or folders (which are searched for org files recursively).\n"
            "\n"
            "This is useful for literate configs that rely on command line\n"
            "workflows to build it.\n"
            "\n"
            "[1mExample:[0m\n"
            "  org-export some-file.org\n"
            "  org-export literate/config/\n"
            "  org-export -p -l sh scripts.org > do_something.sh\n"
            "  org-export -p -l python -t tagA -t tagB file.org | python\n"
            "\n"
            "[1mOptions:[0m\n"
            "  -a --all\t\tExport all blocks by default\n"
            "  -p --print\t\tPrint exported output to stdout than to files\n"
            "  -t --tag TAG\n"
            "     --and TAG\n"
            "     --or TAG\n"
            "    Lets you export org blocks by tag. You may have more than one\n"
            "    of these options.\n")
    (princ (buffer-string))))

(defun *org-babel-export (fn &rest args)
  "Don't write exported blocks to files, print them to stdout."
  (cl-letf (((symbol-function 'write-region)
             (lambda (start end filename &optional append visit lockname mustbenew)
               (princ (buffer-string)))))
    (apply fn args)))

(defvar all-blocks nil)
(defvar and-tags nil)
(defvar or-tags nil)
(let (srcs and-tags or-tags)
  (pop argv)
  (while argv
    (let ((arg (pop argv)))
      (pcase arg
        ((or "-h" "--help")
         (usage)
         (error ""))
        ((or "-a" "--all")
         (setq all-blocks t))
        ((or "-p" "--print")
         (advice-add #'org-html-export-to-html :around #'*org-babel-export))
        ((or "-t" "--tag" "--and")
         (push (pop argv) and-tags))
        ("--or"
         (push (pop argv) or-tags))
        ((guard (file-directory-p arg))
         (setq srcs
               (append (directory-files-recursively arg "\\.org$")
                       srcs)))
        ((guard (file-exists-p arg))
         (push arg srcs))
        (_ (error "Unknown option or file: %s" arg)))))

  (dolist (file srcs)
                (message (format "\n\nNow exporting %s:\n" file))
    (let ((backup (make-temp-file (file-name-base file) nil ".backup.org")))
      (unwind-protect
          ;; Prevent slow hooks from interfering
          (let (org-mode-hook org-confirm-babel-evaluate)
               (with-current-buffer (find-file-noselect file)
               (org-html-export-to-html)))
        (ignore-errors (delete-file backup)))))
  (kill-emacs 0))
#+end_src

* org-export-functions.el
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref org-export-functions.el
:END:

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L3471][here]], and inspired by [[https://stackoverflow.com/users/569280/ebpa][ebpa's]] answer [[https://stackoverflow.com/a/37404938][here]]:

#+begin_src text :tangle (meq/tangle-path) :exports none
<<org-export-functions.el>>
#+end_src

~Note:~ ~org-tangle-functions.el~ is required due to [[https://github.com/bzg/org-mode/blob/d2f4d4b457a9fe7a7dbcfbd2d71c723ffa8c2726/lisp/ob-core.el#L625][this]].

#+begin_src emacs-lisp
(setq org-export-functions-directory (file-name-directory (or load-file-name buffer-file-name))
      windows (member system-type '(windows-nt ms-dos)))
(defun meq/oefd (&rest args) (apply #'concat org-export-functions-directory (mapcar #'(lambda (arg) (concat (if windows "\\" "/") arg)) args)))
(load-file (meq/oefd "org-tangle-functions.el"))
#+end_src

Adapted from [[https://stackoverflow.com/users/3258545/amd][amd's]] answer [[https://stackoverflow.com/a/27158715/10827766][here]]:

#+begin_src emacs-lisp
(require 'org-id)
(setq org-id-locations-file (meq/oefd ".org-id-locations")
      org-id-files (list load-file-name
                         buffer-file-name
                         (meq/oefd "README.org"))
      org-id-link-to-org-use-id t)
(org-id-update-id-locations)
#+end_src

~Note:~ From [[https://narkive.com/69IaWEJV:2.1599.178][here]]:

#+begin_quote
The value of the variable is saved to the file when emacs exits and when org-id-find is called and cannot find the id (I think),
or you eval ~(org-id-locations-save)~ explicitly.
#+end_quote

#+begin_src emacs-lisp
(defun meq/org-html-src-block (src-block _contents info)
  "Transcode a SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (if (org-export-read-attribute :attr_html src-block :textarea)
      (org-html--textarea-block src-block)
    (let* ((lang (org-element-property :language src-block))
           (lang (cond ((member lang '("emacs-lisp")) "lisp")
                       ((member lang '("shell" "zsh" "bash")) "sh")
                       ((member lang '("text")) "plaintext")
                       (t lang)))
           (code (org-html-format-code src-block info))
           (label (let ((lbl (org-html--reference src-block info t)))
                    (if lbl (format " id=\"%s\"" lbl) "")))
           (klipsify  (and  (plist-get info :html-klipsify-src)
                            (member lang '("javascript" "js"
                                           "ruby" "scheme" "clojure" "php" "html")))))
      (if (not lang) (format "<pre class=\"example\"%s>\n%s</pre>" label code)
        (format "<div class=\"org-src-container\">\n%s%s\n</div>"
                ;; Build caption.
                (let ((caption (org-export-get-caption src-block)))
                  (if (not caption) ""
                    (let ((listing-number
                           (format
                            "<span class=\"listing-number\">%s </span>"
                            (format
                             (org-html--translate "Listing %d:" info)
                             (org-export-get-ordinal
                              src-block info nil #'org-html--has-caption-p)))))
                      (format "<label class=\"org-src-name\">%s%s</label>"
                              listing-number
                              (org-trim (org-export-data caption info))))))
                ;; Contents.
                (if klipsify
                    (format "<pre><code class=\"src src-%s\"%s%s>%s</code></pre>"
                            lang
                            label
                            (if (string= lang "html")
                                " data-editor-type=\"html\""
                              "")
                            code)
                  (format "<pre><code class=\"language-%s match-braces rainbow-braces\"%s>%s</code></pre>"
                          lang label code)))))))
        (advice-add #'org-html-src-block :override #'meq/org-html-src-block)
#+end_src

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L2701][here]], and inspired by [[https://stackoverflow.com/users/569280/ebpa][ebpa's]] answer [[https://stackoverflow.com/a/37404938][here]]:

#+begin_src emacs-lisp
(defun meq/org-html-inline-src-block (inline-src-block _contents info)
  "Transcode an INLINE-SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (let* ((lang (org-element-property :language inline-src-block))
         (code (org-html-fontify-code
                (org-element-property :value inline-src-block)
                lang))
         (label
          (let ((lbl (org-html--reference inline-src-block info t)))
            (if (not lbl) "" (format " id=\"%s\"" lbl)))))
    (format "<code class=\"language-%s match-braces rainbow-braces\"%s>%s</code>" lang label code)))
(advice-add #'org-html-inline-src-block :override #'meq/org-html-inline-src-block)
#+end_src

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L2676][here]]:

#+begin_src emacs-lisp
(defun meq/org-html-format-headline-default-function
    (todo _todo-type priority text tags info)
  "Default format function for a headline.
See `org-html-format-headline-function' for details."
  (let ((todo (org-html--todo todo info))
        (priority (org-html--priority priority info))
        (tags (org-html--tags tags info)))
    (concat todo (and todo " ")
            priority (and priority " ")
            text
            (and tags "&#xa0;") tags)))
(advice-add #'org-html-format-headline-default-function :override #'meq/org-html-format-headline-default-function)
#+end_src

* org-tangle.sh
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

Adapted from [[https://gnu.emacs.help.narkive.com/xdeUFCnw/double-backslash-problem-in-elisp#post2][here]]:

#+name: 20220211200359152893769
#+begin_src emacs-lisp :eval never-export
(setq doom-tangle (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/hlissner/doom-emacs/master/bin/org-tangle 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= doom-tangle "")
    (thread-first org-tangle-directory
                  (concat "org-tangle.sh")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    (thread-last doom-tangle
        (replace-regexp-in-string "(require 'ob-tangle)"
                                  (format (concat "(require 'ob-tangle)"
                                                  "\n"
                                                  "(load-file (concat %s \"org-tangle-functions.el\"))"
                                                  "\n"
                                                  "(setq org-id-locations-file (concat %s \".org-id-locations\"))")
                                          org-tangle-directory-function
                                          org-tangle-directory-function))
        (replace-regexp-in-string "(dolist (file srcs)" "(dolist (file srcs)\n\t\t(message (format \"\\\\n\\\\nNow tangling %s:\\\\n\" file))")
        (replace-regexp-in-string "(org-export-expand-include-keyword)" ";; (org-export-expand-include-keyword)")))
#+end_src

#+begin_src shell :tangle (meq/tangle-path)
<<20220211200359152893769()>>
#+end_src

* org-tangle-functions.el

The tangle functions are adapted from [[https://emacs.stackexchange.com/a/29884/31428][this answer on the emacs Stack Exchange]], written by [[https://emacs.stackexchange.com/users/2710/andrew-swann][Andrew Swann]]:

#+begin_src emacs-lisp :tangle (meq/tangle-path)
(eval-when-compile (require 'subr-x))

(defun meq/get-header nil (interactive)
    (nth 4 (org-heading-components)))
(defun meq/tangle-path nil (interactive)
    (string-remove-prefix "/" (concat
        (org-format-outline-path (org-get-outline-path)) "/"
            (meq/get-header))))
(defun meq/get-theme-from-header nil (interactive)
    (string-remove-suffix "-theme.el" (meq/get-header)))
(defun meq/tangle-on-relay nil (interactive)
    (if (member (system-name) '(<<relays>>)) meq/tangle-path "no"))

(let* ((README "settings/README.org")
        (file (cond
                ((file-exists-p README) README)
                ((file-exists-p (concat "home/.emacs.d/" README)) (concat "home/.emacs.d/" README))
                ((file-exists-p (concat "~/" README)) (concat "~/" README))
                ((file-exists-p (concat "~/.emacs.d/" README)) (concat "~/.emacs.d/" README))
                ((file-exists-p (concat "/" README)) (concat "/" README)))))
    (when file (org-babel-lob-ingest file)))
#+end_src

* makefile

#+begin_src makefile :tangle (meq/tangle-path)
.RECIPEPREFIX := |
.DEFAULT_GOAL := super-push

# Adapted From: https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))

pre-init:
|-fd . $(mkfileDir)/.. -HIt d -t e -x rm -rf

tangle-setup:
|cp $(mkfileDir)/org-tangle.sh $(mkfileDir)/backup-tangle.sh
|chmod +x $(mkfileDir)/org-tangle.sh $(mkfileDir)/backup-tangle.sh

tangle: tangle-setup
|yes yes | fd . $(mkfileDir)/.. \
    -HId 1 -e org \
    -x $(mkfileDir)/backup-tangle.sh
|fd . $(mkfileDir) \
    -HIe sh \
    -x chmod +x

pull: subinit
|git -C $(mkfileDir)/.. pull

add:
|git -C $(mkfileDir)/.. add .

commit:
|-git -C $(mkfileDir)/.. commit --allow-empty-message -am ""

cammit: pre-init add commit

push: cammit
|-git -C $(mkfileDir)/.. remote set-url --push origin git@github.com:<<username>>/$$(basename `git -C $(mkfileDir)/.. config --get remote.origin.url`)
|-git -C $(mkfileDir)/.. push 2>/dev/null || git -C $(mkfileDir)/.. push origin HEAD:$$(git -C $(mkfileDir)/.. remote show origin | grep "HEAD branch" | sed 's/.*: //')

push-me: tangle-setup
|yes yes | fd . $(mkfileDir) \
    -HId 1 -e org \
    -x $(mkfileDir)/backup-tangle.sh
|fd . $(mkfileDir) \
    -HIe sh \
    -x chmod +x
|-fd . $(mkfileDir) -HIt d -t e -x rm -rf
|git -C $(mkfileDir) add .
|-git -C $(mkfileDir) commit --allow-empty-message -am ""
|-git -C $(mkfileDir) remote set-url --push origin git@github.com:<<username>>/$$(basename `git -C $(mkfileDir) config --get remote.origin.url`)
|-git -C $(mkfileDir) push 2>/dev/null || git -C $(mkfileDir) push origin HEAD:$$(git -C $(mkfileDir) remote show origin | grep "HEAD branch" | sed 's/.*: //')

super-push: tangle push
#+end_src

* Addendum

These are just a few blocks I use regularly in my ~org~ files, whether in ~noweb~, naming, or otherwise:

#+name: username
#+begin_src text
shadowrylander
#+end_src

#+name: email
#+begin_src text
titaniumfiles@outlook.com
#+end_src

#+name: hostname
#+begin_src emacs-lisp
(system-name)
#+end_src

#+name: extip
#+begin_src emacs-lisp
(shell-command-to-string "curl -fsSL ifconfig.me")
#+end_src

#+name: yadm-dir
#+begin_src text
.local/share/yadm
#+end_src

#+name: primary-distro
#+begin_src text
ubuntu
#+end_src

#+name: relays
#+begin_src text
"argus" "bastiodon"
#+end_src

# Adapted From: https://www.reddit.com/r/emacs/comments/4o9f0e/anyone_have_disabled_parts_of_their_config_being/d4apjey?utm_source=share&utm_medium=web2x&context=3

#+name: hash-deprecated
#+begin_src emacs-lisp :var name="" :tangle no
(md5 (concat (replace-regexp-in-string "/" "" (
    org-format-outline-path (org-get-outline-path))) (
        nth 4 (org-heading-components)) name))
#+end_src

#+name: hash
#+begin_src emacs-lisp :tangle no
(format-time-string "%Y%m%d%H%M%S%N")
#+end_src
