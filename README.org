#+nosetupfile: yes

* General Properties and Settings
:PROPERTIES:
:header-args:text+: :results raw replace drawer :exports results
:ID:       c821137f-41fe-46e8-aeb6-bb288400d272
:CUSTOM_ID:       c821137f-41fe-46e8-aeb6-bb288400d272
:END:

If setting this up again, use ~C-c C-c~ on the results of the ~emacs-lisp~ code block; taken from [[https://emacs.stackexchange.com/users/91/mankoff][mankoff's]] answer [[https://emacs.stackexchange.com/a/60223/31428][here]]:

#+name: eedc8905-e04c-40d9-97c1-88b840473eaf
#+begin_src text
#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity #o444) :noweb yes :mkdirp yes :cache yes
# #+property: header-args:emacs-lisp+ :comments both
#+end_src

#+RESULTS: eedc8905-e04c-40d9-97c1-88b840473eaf
:results:
#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity #o444) :noweb yes :mkdirp yes :cache yes
# #+property: header-args:emacs-lisp+ :comments both
:end:

Adapted from [[https://stackoverflow.com/users/776405/whil][Whil's]] answer [[https://stackoverflow.com/a/65232183/10827766][here]]:

#+name: de0dd529-e632-4a70-b31b-8830795d51b7
#+begin_src text
#+startup: show3levels
#+end_src

#+RESULTS: de0dd529-e632-4a70-b31b-8830795d51b7
:results:
#+startup: show3levels
:end:

* HTML Export Options
:PROPERTIES:
:header-args:text+: :results raw replace drawer :exports results
:ID:       0ee9b692-e89d-46f4-9f34-bffa599bf068
:CUSTOM_ID:       0ee9b692-e89d-46f4-9f34-bffa599bf068
:END:

More options can be found [[https://orgmode.org/manual/Export-Settings.html][on the orgmode website]]:

#+name: 20220212070000334862280
#+begin_src text
#+options: num:nil html-style:nil pri:t
#+end_src

#+RESULTS: 20220212070000334862280
:results:
#+options: num:nil html-style:nil pri:t
:end:

** Mathjax

More ~mathjax~ options can be found [[https://orgmode.org/manual/Math-formatting-in-HTML-export.html][on the orgmode website]] and [[http://doc.endlessparentheses.com/Var/org-html-mathjax-options.html][doc.endlessparentheses.com]]:

#+name: 20220212070406770093600
#+begin_src text
#+html_mathjax: align: left indent: 5%
#+end_src

#+RESULTS: 20220212070406770093600
:results:
#+html_mathjax: align: left indent: 5%
:end:

** HTML Headers
:PROPERTIES:
:header-args:html+: :noweb-ref html-head
:END:

More ~html~ options can be found on the orgmode website:
- https://orgmode.org/manual/HTML-specific-export-settings.html
- https://orgmode.org/manual/Publishing-options.html#:~:text=HTML%20specific%20properties
- https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html#org2656e9f
- https://orgmode.org/guide/HTML-Export.html
- https://orgmode.org/manual/Quoting-HTML-tags.html

Adapted from [[https://raw.githubusercontent.com/alhassy/alhassy.github.io/master/AlBasmala.org#:~:text=HTML%2DPreamble%0A%20%20%3AEND%3A-,%23%2BBEGIN_SRC%20emacs%2Dlisp%20%3Aexports%20results%20%3Aresults%20raw%20replace%20drawer,-(s%2Djoin%20%22%5Cn][here]]:

#+begin_src hy :results raw replace drawer :exports results
(.join "\n" (gfor line (.split #[html-head[
<<html-head>>]html-head] "\n") (+ "#+html_head: " line)))
#+end_src

#+RESULTS:
:results:
#+html_head: <link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/primary/syvl.css" />
#+html_head: <link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.ico" sizes="any" />
#+html_head: <link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.svg" />
#+html_head: <link rel="manifest" href="https://combinatronics.com/sylvorg/settings/main/manifest.json" />
#+html_head: <link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+html_head: <script src="https://combinatronics.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+html_head: <script>hljs.highlightAll();</script>
#+html_head: <div class="header">
#+html_head: <h1>We Are Syvlorg.</h1>
#+html_head: <a href="">About Me</a>
#+html_head: <a href="">About This Website</a>
#+html_head: <a href="">About Syvlorg</a>
#+html_head: <a href="https://resume.syvl.org">Résumé</a>
#+html_head: <a href="https://index.syvl.org">Index</a>
#+html_head: </div>
:end:

*** Syvl Stylesheet

#+begin_src html
<link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/primary/syvl.css" />
#+end_src

*** Favicons

#+begin_src html
<link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.ico" sizes="any" />
<link rel="icon" href="https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola.svg" />
#+end_src

*** Manifest

#+begin_src html
<link rel="manifest" href="https://combinatronics.com/sylvorg/settings/main/manifest.json" />
#+end_src

*** Highlightjs

Check out more styles here: https://highlightjs.org/static/demo/
Favorites include:
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/gradient-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/kimbie-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/paraiso-dark.min.css
- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/base16/gruvbox-dark-hard.min.css

Unminify using [[https://unminify.com/][this]].

~Note:~ If just ~rel="stylesheet"~ and the ~href~ don't work, add ~type="text/css"~ as well.

Highlightjs theme for development:

#+begin_src html
<link rel="stylesheet" type="text/css" href="https://combinatronics.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css" />
#+end_src

Custom bundle of languages, built using the instructions from [[https://github.com/highlightjs/highlight.js/issues/3033#issuecomment-943846001][here]]:

#+begin_src sh
node tools/build.js -t browser bash css diff dockerfile hy ini json lisp makefile nim nix plaintext python xml yaml
#+end_src

Highlightjs for development:

#+begin_src html
<script src="https://combinatronics.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js"></script>
#+end_src

#+begin_src html
<script>hljs.highlightAll();</script>
#+end_src

*** Header

#+begin_src html
<div class="header">
<h1>We Are Syvlorg.</h1>
#+end_src

**** About
***** Me

#+begin_src html
<a href="">About Me</a>
#+end_src

***** This Website

#+begin_src html
<a href="">About This Website</a>
#+end_src

***** Syvlorg

#+begin_src html
<a href="">About Syvlorg</a>
#+end_src

**** Résumé

#+begin_src html
<a href="https://resume.syvl.org">Résumé</a>
#+end_src

**** Index

#+begin_src html
<a href="https://index.syvl.org">Index</a>
#+end_src

**** End of Header

#+begin_src html
</div>
#+end_src

* manifest.json

Adapted from [[https://developer.mozilla.org/en-US/docs/Web/Manifest][here]] and [[https://css-tricks.com/svg-favicons-and-all-the-fun-things-we-can-do-with-them/][here]]:

#+begin_src json :tangle (meq/tangle-path)
{
  "$schema": "https://json.schemastore.org/web-manifest-combined.json",
  "name": "Syvl",
  "short_name": "Syvl",
  "start_url": ".",
  "display": "standalone",
  "description": "A readable Syvlorg.",
  "icons": [
    { "src": "https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola-192.png", "type": "image/png", "sizes": "192x192" },
    { "src": "https://combinatronics.com/sylvorg/settings/main/src/icons/favicons/shiny-sandshrew-alola-512.png", "type": "image/png", "sizes": "512x512" }
  ]
}
#+end_src

* src
** icons
*** favicons

#+name: 256b3d05-4ba0-406f-9e96-61747a598915
#+begin_src emacs-lisp :var name="" gen="" shiny='t :eval never-export :cache no
(setq name-as-number (string-to-number name)
      icon (shell-command-to-string (concat "curl -fsSL https://raw.githubusercontent.com/<<username>>/svg-pokemon-sprites/main/icons/generation-"
                                            gen
                                            "/"
                                            (if (= name-as-number 0) "alphabetical" "ordered")
                                            "/"
                                            (if shiny "shiny" "regular")
                                            "/"
                                            name
                                            ".svg 2> /dev/null"))
      icon (if (string= icon "")
                    (with-temp-buffer (insert-file-contents (concat "./src/icons/favicons/"
                                                                    (if shiny "shiny-" "")
                                                                    theme ".svg"))
                                      (buffer-string))
                    icon))
#+end_src

**** shiny-sandshrew-alola.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="sandshrew-alola", gen="vii")>>
#+end_src

**** shiny-zigzagoon-galar.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="zigzagoon-galar", gen="viii")>>
#+end_src

**** shiny-linoone-galar.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="linoone-galar", gen="viii")>>
#+end_src

**** shiny-obstagoon.svg

#+begin_src xml :tangle (meq/tangle-path)
<<256b3d05-4ba0-406f-9e96-61747a598915(name="obstagoon", gen="viii")>>
#+end_src

** styles
*** primary
**** syvl.css
:PROPERTIES:
:header-args:css+: :noweb-ref syvl.css
:END:

Adapted from the following:
- [[https://github.com/jessekelly881/Rethink][rethink]]
- [[https://github.com/gongzhitaao/orgcss][orgcss]]
- [[https://gitlab.com/OlMon/org-themes][org-themes]]

~Note:~ More settings can be found [[https://orgmode.org/manual/CSS-support.html][here]].

#+begin_src text :tangle (meq/tangle-path) :exports none
<<syvl.css>>
#+end_src

#+begin_src css
/* @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro:200,300,400'); */

:root {
    --font-size-1: 2rem;
    --font-size-2: 1.5rem;
    --font-size-3: 1.25rem;
    --font-size-4: 1rem;
    --font-size-small: 0.5rem;
    --font-size-xsmall: 0.25rem;
    --margins: 5rem;
    --smaller-margins: 2.5rem;
    --padding: 1rem;
    --header-padding: 0.25rem;
    --background-color: #222222;
    --dracula-orange: #ffb86c;
    --exo-ui-red: #ff5156;
    --joker-purple: #be80ff;
    --acid-green: #DFFF00;
}

.header {
    text-align: center;
    background: var(--background-color);
    font-size: var(--font-size-3);
    border-bottom: 1px solid var(--dracula-orange);
    padding-bottom: var(--padding);
}

/* More information [[https://developer.mozilla.org/en-US/docs/Web/CSS/:not][here]]: */
.header>a:not(:last-child)::after {
    content: " |";
}

.header > a:link {
    color: var(--joker-purple);
    display: inline;
    text-decoration: none;
}

html,
body {
    background-color: var(--background-color);
    font-family: "Courier New", monospace;
    font-weight: 100;
    color: var(--joker-purple);
}

@media only screen and (min-width: 750px) /* Large screens */
{
    html,
    body {
        margin-left: var(--margins);
        margin-right: var(--margins);
    }
}

@media only screen and (max-width: 750px) /* Small screens */
{
    html,
    body {
        margin-left: var(--smaller-margins);
        margin-right: var(--smaller-margins);
    }
}

::selection {
    background-color: var(--dracula-orange);
    color: var(--background-color);
}

h1 {
    font-size: var(--font-size-1);
}

h2 {
    font-size: var(--font-size-2);
}

h1>.subtitle,
h3,
h4,
h5 {
    font-size: var(--font-size-3);
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-weight: 300;
    letter-spacing: -0.03em;
    color: var(--dracula-orange);
}

h2,
h3,
h4,
h5,
h6 {
    border-bottom: 1px solid var(--joker-purple);
    width: fit-content;
    padding-bottom: var(--header-padding);
}

#table-of-contents {
    padding-bottom: var(--padding);
    border-bottom: 1px solid var(--dracula-orange);
}

#table-of-contents ul,
#table-of-contents li {
    list-style-type: none;
    margin-top: var(--header-padding);
    margin-bottom: var(--header-padding);
}

#table-of-contents .tag {
    float: right;
}

#table-of-contents a:link {
    text-decoration: none;
    color: var(--joker-purple);
}

#table-of-contents a:hover {
    color: var(--exo-ui-red);
}

img {
    max-width: 100%;
}

blockquote {
    border-left: 0.2rem solid var(--dracula-orange);
    padding-left: 1rem;
    font-style: italic;
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
blockquote>p {
    color: var(--exo-ui-red);
}

p,
pre,
ol,
ul,
table,
code {
    color: var(--dracula-orange);
}

.done,
.priority,
.tag,
.todo,
code {
    color: var(--background-color);
    position: relative;
    bottom: .1rem;
    font-size: 80%;
}

.done,
.priority,
.todo,
code {
    font-weight: 400;
    background-clip: padding-box;
    font-family: "Courier New", monospace;
    font-weight: bold;
    line-height: 1
}

.done,
.priority,
.tag>span,
.todo,
code {
    border-radius: 3px;
    padding-top: .1rem;
    padding-left: .3rem;
    padding-right: .3rem;
    line-height: 1;
}

.priority,
.tag>span,
.todo,
code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--exo-ui-red));
}

td > code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

/* ~.on>code~ refers to a checkbox's checked state; ~.off>code~ refers to the opposite. */
.on>code,
.done {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

.tag {
    top: .1rem;
    display: block;
    float: right;
    font-weight: 550;
}

.tag>span {
    text-transform: uppercase;
}

table,
#table-of-contents {
    margin-bottom: var(--padding);
}

/* Even Table Row */

tr:nth-child(even) {
    background-color: #2f1e2e;
}

.org-org-meta-line,
.org-keyword {
    color: var(--dracula-orange);
}

a:link,
a:hover,
a:visited,
a:visited:hover {
    text-decoration: none;
}

a:link {
    color: var(--acid-green);
}

a:visited {
    color: var(--joker-purple);
}

/* Adapted from [[https://stackoverflow.com/users/3246606/harry-the-mad-lurker][Harry The Mad Lurker's]] answer [[https://stackoverflow.com/a/21977877/10827766][here]]: */
a:hover,
a:visited:hover {
    color: var(--exo-ui-red);
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
#postamble :not(:last-child)::after {
    content: " |";
}

#postamble>p {
    display: inline;
}

#postamble {
    text-align: center;
    width: 100%;
    font-size: var(--font-size-4)
}

.status {
    padding: var(--padding);
    border-top: 1px solid var(--dracula-orange);
    text-align: center;
}

.outline-text-2,
.outline-text-3,
.outline-text-4 {
    max-width: 100%;
    overflow-x: auto;
}

.underline {
    text-decoration: var(--exo-ui-red) wavy underline;
}

del {
    text-decoration: var(--joker-purple) wavy line-through;
}
#+end_src

*** highlight

Alpha levels for hex colors can be set using the guide [[https://www.digitalocean.com/community/tutorials/css-hex-code-colors-alpha-values][here]];
alpha hex codes can be found on [[https://stackoverflow.com/users/1048340/jared-rummler][Jared Rummler's]] answer [[https://stackoverflow.com/a/25170174][here]].

Regular expressions adapted from [[https://stackoverflow.com/users/4465/levik][levik's]] answer [[https://stackoverflow.com/a/159140][here]].

Peach gradient colorscheme can be found [[https://every-single-one-of-the-things.tumblr.com/post/186683107707/send-me-a-peach-part-of-a-collab-with][here]]:

| Color        | HEX     |
|--------------+---------|
| Tulip        | #F48191 |
| Dark Salmon  | #EF9188 |
| Tumbleweed   | #EDA58B |
| Peach-Orange | #F2BB9B |
| Apricot      | #FBCCB2 |

#+name: 20220207221553779604149
#+begin_src emacs-lisp :var theme="" base="" :eval never-export :cache no
(setq mini-theme (shell-command-to-string (concat "curl -fsSL https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/"
                                 (if (string= base "") "" (concat base "/"))
                                 theme
                                 ".min.css 2> /dev/null"))
      new-theme (if (string= mini-theme "")
                    (with-temp-buffer (insert-file-contents (concat "./src/styles/highlight/" theme ".min.css"))
                                      (buffer-string))
                    (thread-last mini-theme
                                 (replace-regexp-in-string "}.hljs{" "}.hljs{border-radius:0.2rem;")
                                 (replace-regexp-in-string "/\\*\\(.\\|\n\\)*?\\*/" ""))))
(pcase theme
       ("gradient-dark" (replace-regexp-in-string "background-image:linear-gradient.*?}"
                                                  "background-image:linear-gradient(160deg,#F48191,#EF9188,#EDA58B,#F2BB9B,#FBCCB2);color:#222222}"
                                                  new-theme))
       (t new-theme))
#+end_src

**** gradient-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="gradient-dark")>>
#+end_src

**** gruvbox-dark-hard.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="gruvbox-dark-hard", base="base16")>>
#+end_src

**** kimbie-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="kimbie-dark")>>
#+end_src

**** paraiso-dark.min.css

#+begin_src css :tangle (meq/tangle-path)
<<20220207221553779604149(theme="paraiso-dark")>>
#+end_src

* default.nix

Taken from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
(import
  (
    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
      sha256 = lock.nodes.flake-compat.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix
#+end_src

* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
(import ./.).devShell.${builtins.currentSystem}
#+end_src

* .gitignore

#+begin_src gitignore
**/*.*~
**/*.direnv
**/*.envrc:*
node_modules/
package-lock.json
package.json
#+end_src

* envrc.nix

#+begin_src nix
(import ./.).devShells.${builtins.currentSystem}.envrc
#+end_src

* .envrc

#+name: 34af8911-ef15-4145-a42d-4a7523aa37f1
#+begin_src emacs-lisp
(file-name-nondirectory buffer-file-name)
#+end_src

#+begin_src shell :tangle (meq/tangle-path) :shebang "#! /usr/bin/env nix-shell"
#! nix-shell envrc.nix
#! nix-shell -i sh -p git settings
files="<<34af8911-ef15-4145-a42d-4a7523aa37f1()>> flake.org"
if hash org-tangle 2> /dev/null; then
    org-tangle $files
else
    chmod +x ./bin/* && ./bin/org-tangle $files || :
fi

files="flake.nix"
for file in files; do
    [ -f "$file" ] && git add "$file" || :
done

nix flake info &> /dev/null && use flake || use nix
#+end_src

* strapper
** setup.py

#+begin_src py :tangle (meq/tangle-path) :shebang "#!/usr/bin/env python3"
from setuptools import setup, find_packages
setup(name = 'strapper', version = '1.0.0.0', packages = find_packages(), scripts = [ "strapper.py" ])
#+end_src

** strapper.py

#+begin_src py :tangle (meq/tangle-path) :shebang "#!/usr/bin/env python3"
import hy, os
from addict import Dict
from oreo import module_installed
strapper = module_installed(os.path.dirname(os.path.realpath(__file__)) + "/strapper.hy").strapper
if __name__ == "__main__":
    strapper(obj=Dict(dict()))
#+end_src

** strapper.hy
:PROPERTIES:
:header-args:hy+: :noweb-ref 9f94385b-1c84-4e23-8efc-7689a80d2050
:END:

#+begin_src text :tangle (meq/tangle-path)
<<9f94385b-1c84-4e23-8efc-7689a80d2050>>
#+end_src

*** Imports

#+begin_src hy
(import click)
(import json)
(import oreo)
(import os)
#+end_src

**** From

#+begin_src hy
(import addict [Dict :as D])
(import bakery [ getconf
                 mkswap
                 mount :as Mount
                 nix
                 nixos-generate-config
                 nixos-install
                 nixos-rebuild
                 parted
                 rsync
                 sd
                 swapon
                 umount
                 zfs
                 zpool ])
(import functools [partial])
(import pathlib [Path])
(import sys [argv])
#+end_src

**** Coconut

[[https://coconut.readthedocs.io/en/latest/index.html][Coconut]]:

#+begin_src hy
(try (import coconut *)
     (except [ImportError] None))
#+end_src

**** Toolz

[[https://github.com/pytoolz/toolz][Toolz]] and [[https://github.com/pytoolz/cytoolz/][CyToolz]]:

#+begin_src hy
(try (import cytoolz [last])
     (except [ImportError]
             (import toolz [last])))
#+end_src

*** Requires

#+begin_src hy :noweb-ref no
(require hyrule [-> assoc])
#+end_src

*** Datasets

#+name: 03a790b2-39f2-40a3-be10-b107c73df509
#+begin_src text
reserved
#+end_src

#+name: f3568bf1-26cf-4d6f-8182-aad00b6a8d69
#+begin_src json
{
    "base": {  },
    "hold": {  },
    "omniverse": {  },
    "<<03a790b2-39f2-40a3-be10-b107c73df509>>": {  },
    "<<username>>": { "datasets": {
            "oreo": {  },
            "sylveon": {  },
            "sylvorg": {  },
            "syvlorg": {  },
            "<<reponame>>": {  },
            "uru": {  }},
        "options": [ "mountpoint=legacy" ]},
    "system": {
        "datasets": {
            "home": { "datasets": { "root": { "mountpoint": "/root" }}},
            "nix": {  },
            "persist": { "datasets": { "root": { "mountpoint": "/persist/root" }}},
            "root": {  },
            "tmp": { "datasets": { "nix": {  }}, "options": [ "sync=disabled" ] }
        },
        "options": [ "mountpoint=legacy" ]
    },
    "virt": {
        "datasets": {
            "docker": {  },
            "kvm": {  },
            "podman": { "datasets": {  }},
            "qemu": {  },
            "vagrant": {  },
            "xen": {  }
        },
        "options": [ "mountpoint=legacy", "refreservation=none" ],
        "mountpoint": "/var/lib"
    }
}
#+end_src

*** Update Datasets

#+begin_src hy
(defn update-datasets [ctx [swap 0] [encrypted False] [deduplicated False] [pool False] [root-device None] [reserved-only False]]
      (setv host         ctx.obj.host
            resources    ctx.obj.resources
            snap-dir     [ "snapdir=visible" ]
            extra-copies (+ snap-dir [ "copies=3" ])
            cache        [ "sync=disabled" ]
            ml           "mountpoint=legacy"
            d            "datasets"
            s            "system"
            reserved     "<<03a790b2-39f2-40a3-be10-b107c73df509>>"
            datasets     (D (.loads json (.strip #[[
                                <<f3568bf1-26cf-4d6f-8182-aad00b6a8d69>>
                         ]])))
            primary-user "<<username>>"
            users        (D (.loads json (.strip #[[
                                <<users>>
                         ]])))
            homes        (D (.loads json (.strip #[[
                                <<homes>>
                         ]]))))

      #_(assoc datasets host (D { "datasets" { "jails" { "datasets" { "base" (dict)}}}
                                     "options" [ ml ]}))

      (setv (. datasets [host]) (D { "datasets" { "jails" { "datasets" { "base" (dict)}}}
                                     "options" [ ml ]}))

      (for [user (.values users)]

           #_(assoc (. datasets [s] [d] home [d]) user (dict))
           
           (setv (. datasets [s] [d] home [d] [user]) (dict))

           #_(assoc (. datasets [s] [d] persist [d]) user (dict))

           (setv (. datasets [s] [d] persist [d] [user]) (dict))

           #_(assoc (. datasets virt [d] podman [d]) user (dict))

           (setv (. datasets virt [d] podman [d] [user]) (dict))

           )
      (if reserved-only
          (.create zfs (+ host "/" reserved) :o "mountpoint=none")
          (do (with [dnix (open (+ resources "/datasets.nix") "w")]
                    (.write dnix (+ "host: { \n\t\""
                                    (or root-device "${host}/system/root")
                                    "\" = \"/\";"
                                    "\n"))
              (defn recurse [ddict dname droot [mountpoint ""]]
                    (setv recurse/datasets     (.list zfs :r True :o "name" :m/list True :m/ignore-stderr True)
                          recurse/datasets     (cut recurse/datasets 2 (len recurse/datasets))
                          recurse/dataset      (+ droot "/" dname)
                          recurse/real-dataset (.replace recurse/dataset "${host}" host)
                          cloning              (and (!= dname "base")
                                                    (and encrypted deduplicated))
                          prefixes             (, "system"
                                                  "system/root"
                                                  "swap"
                                                  "base"
                                                  "omniverse"
                                                  reserved ))
                    (if cloning
                        (setv clone-or-create  "clone"
                              snapshot-or-none (+ host "/base@root"))
                        (setv clone-or-create  "create"
                              snapshot-or-none ""))
                    (if (not (in recurse/real-dataset (lfor prefix prefixes (+ host "/" prefix))))
                        (do (if (setx recurse/mountpoint (.get ddict "mountpoint" ""))
                                (setv mountpoint recurse/mountpoint)
                                (if mountpoint
                                    (setv mountpoint (+ mountpoint "/" dname)
                                          recurse/mountpoint mountpoint)
                                    (do (setv recurse/mountpoint (.removeprefix recurse/dataset (+ "${host}" "/")))
                                        (for [prefix prefixes]
                                             (setv recurse/mountpoint (.removeprefix recurse/mountpoint (+ prefix "/"))))
                                        (setv recurse/mountpoint (+ "/" recurse/mountpoint)))))
                            (if (and (.startswith recurse/real-dataset (+ host "/" primary-user))
                                     (not (= recurse/real-dataset (+ host "/" primary-user))))
                                (.write dnix (+ "\t\""
                                                recurse/dataset
                                                "\" = [ "
                                                (.join " " (gfor user (.keys users) (+ "\"" (get homes user) "/" dname "\"")))
                                                " ];\n"))
                                #_(for [user (.keys users)]
                                     (.write dnix (+ "\t\""
                                                     recurse/dataset
                                                     "\" = \""
                                                     (+ (get homes user) "/" dname)
                                                     "\";\n")))
                                (.write dnix (+ "\t\""
                                                recurse/dataset
                                                "\" = \""
                                                recurse/mountpoint
                                                "\";\n")))))
                    (if (and pool (not (in recurse/real-dataset recurse/datasets)))
                        (do (zfs :m/subcommand clone-or-create
                                 :o { "repeat-with-values" (.get ddict "options" []) }
                                 snapshot-or-none
                                 recurse/real-dataset)
                            (.snapshot zfs :r True (+ recurse/real-dataset "@blank"))
                            (.hold zfs :r True "blank" (+ recurse/real-dataset "@blank"))))
                    (for [[key value] (.items (.get ddict d (D {  })))]
                         (recurse value key recurse/dataset mountpoint)))
              (for [[key value] (.items datasets)]
                   (recurse value key "${host}"))
              (.write dnix "}"))))
      (if (or pool reserved-only)
          (let [pool-size-plus-metric (get (.get zpool :H True "size" host :m/list True :m/split True) 2)
#+end_src

#+begin_src hy :noweb-ref no
                pool-size             (-> pool-size-plus-metric
                                          (cut 0 -1)
                                          float
                                          (round 2))
#+end_src

#+begin_src hy
                pool-size             (round (float (cut pool-size-plus-metric 0 -1)) 2)
#+end_src

#+begin_src hy
                pool-metric           (last pool-size-plus-metric)]
               (defn pool-percentage-value [percentage]
                     #_(-> percentage
                         float
                         (/ 100)
                         (round 2)
                         str
                         (+ pool-metric)
                         return)

                     (return (+ (str (round (/ (float percentage) 100) 2)) pool-metric))

                         )
               (.set zfs
                     (+ "refreservation=" (pool-percentage-value 15))
                     (+ host "/" reserved))

               ;; Apparently, if python internal keywords exist in the argument, such as "set", etc.
               ;; the command errors out; perhaps something to raise an issue of.
               ;; This seems to work as an alternative.
               ;; run(f"zfs set refreservation={pool_percentage_value(15)} {args.Pool}/{reserved}", shell = True)

               (if (not reserved-only)
                   (do (if swap
                           (let [swoptions [ "com.sun:auto-snapshot=false"
                                             "compression=zle"
                                             "logbias=throughput"
                                             "primarycache=metadata"
                                             "secondarycache=none"
                                             "sync=standard" ]
                                 page-size (getconf "PAGESIZE" :m/str True)]
                                (.create zfs
                                         :V (+ (str swap) "G")
                                         :b page-size
                                         :o { "repeat-with-values" swoptions }
                                         (+ host "/swap"))
                                (mkswap (+ "/dev/zvol" host "/swap")))))))))
#+end_src

*** Click

#+begin_src hy
(setv no-host-error-message "Sorry! The host needs to be set; do this with the main command while running the subcommand!")
#@((.group click :no-args-is-help True)
   (.option click "-d" "--dazzle" :is-flag True)
   (.option click "-H" "--host")
   (.option click "-i" "--inspect" :is-flag True)
   (.option click "-P" "--print-run" :is-flag True :cls oreo.Option :xor [ "print" ])
   (.option click "-p" "--print" :is-flag True :cls oreo.Option :xor [ "print-run" ])
   (.option click "-r" "--resources-dir")
   click.pass-context
   (defn strapper [ ctx dazzle host inspect print-run print resources-dir ]
         (if (!= (.geteuid os) 0)
             (raise (SystemError "Sorry; this program needs to be run as root!")))
         (.ensure-object ctx dict)
         (if resources-dir
             (setv ctx.obj.resources resources-dir)
             (do (setv ctx.obj.resources (/ cwd nixos-dir))
                 (let [ cwd (.cwd Path)
                        nixos-dir (Path "etc/nixos/") ]
                      (if (= (cut cwd.parts -2 None) (, "etc" "nixos"))
                          (setv ctx.obj.resources cwd)
                          (while (not (.exists ctx.obj.resources))
                                 (setv cwd (.joinpath (Path (get cwd.parts 0)) #* (cut cwd.parts -1))
                                       ctx.obj.resources (/ cwd nixos-dir))
                                 (else (setv ctx.obj.resources (if (.exists (setx mnt-nixos-dir (/ "/mnt" nixos-dir)))
                                                                   mnt-nixos-dir
                                                                   (/ "/" nixos-dir)))))))))
         (setv ctx.obj.host host)
         (.bake-all- getconf :m/dazzle dazzle :m/print-command-and-run print-run :m/print-command print :m/debug inspect)))
#+end_src

**** Main

#+begin_src hy
#@((.command strapper :no-args-is-help True
                      :context-settings { "ignore_unknown_options" True
                                          "allow_extra_args"       True })
   (.argument click "program-arguments" :nargs -1)
   (.option click "-a" "--all" :is-flag True)
   (.option click "-c" "--copy" :is-flag True)
   (.option click "-g" "--generate" :is-flag True)
   (.option click "-i" "--install" :is-flag True)
   (.option click "-b" "--install-bootloader" :is-flag True :cls oreo.Option :req-one-of [ "install" "all" ])
   (.option click "-r" "--replace" :is-flag True)
#+end_src

This can't use a default value, as that would trigger a rebuild all the time.

#+begin_src hy
   (.option click "-R" "--rebuild")
#+end_src

#+begin_src hy
   click.pass-context
   (defn main [ ctx all copy generate install program-arguments rebuild replace install-bootloader ]
         (if ctx.obj.host
             (do (.bake-all- getconf :m/sudo True :m/run True)
                 (setv copy-partial (partial rsync :a True :v { "repeat" 2 } :c True :z { "repeat" 2 } f"{ctx.obj.resources}/"))
                 (if rebuild
                     (do (if copy
                             (copy-partial "/etc/nixos/"))
                         (nixos-rebuild rebuild #* ctx.args :show-trace True))
                     (do (if (or copy all)
                             (do (update-datasets ctx)
                                 (copy-partial "/mnt/etc/nixos/")))
                         (if (or generate all)
                             (nixos-generate-config :root "/mnt"))
                         (if (or replace all)
                             (if ctx.obj.host
                                 (do (sd "./hardware-configuration.nix"
                                         (+ "(import ./.).nixosConfigurations.${pkgs.stdenv.targetPlatform.system}.mini-" ctx.obj.host)
                                         "/mnt/etc/nixos/configuration.nix")
                                     (sd "'device = \"\"'"
                                         "'device = \"!\"'"
                                         "/mnt/etc/nixos/hardware-configuration.nix"))
                                 (raise (NameError no-host-error-message))))
                         (if (or install all)
                             (let [ options [
#+end_src

From [[https://github.com/NixOS/nix/issues/2293#issuecomment-405339738][here]], and documented [[https://nixos.org/manual/nix/stable/expressions/builtins.html#:~:text=The%20fetched%20tarball%20is%20cached%20for%20a%20certain%20amount%20of%20time%20(1%20hour%20by%20default)%20in%20~/.cache/nix/tarballs/.%20You%20can%20change%20the%20cache%20timeout%20either%20on%20the%20command%20line%20with%20%2D%2Dtarball%2Dttl%20number%2Dof%2Dseconds%20or%20in%20the%20Nix%20configuration%20file%20by%20adding%20the%20line%20tarball%2Dttl%20%3D%20number%2Dof%2Dseconds.][here]]:

#+begin_quote
The fetched tarball is cached for a certain amount of time (1 hour by default) in ~/.cache/nix/tarballs/.
You can change the cache timeout either on the command line with --tarball-ttl number-of-seconds
or in the Nix configuration file by adding the line tarball-ttl = number-of-seconds.
#+end_quote

Because I'm using the ~flakes nixosConfigurations~ output, I don't need this any more:

#+begin_src hy :noweb-ref no
                                        "tarball-ttl 0"
#+end_src

Adapted from [[https://github.com/NixOS/nix/issues/807#issuecomment-209895935][here]]:

#+begin_src hy
                                        "build-fallback true"
#+end_src

#+begin_src hy
                                  ] ]
                                  (nixos-install #* ctx.args
#+end_src

Because I'm using the ~flakes nixosConfigurations~ output, I don't need this any more:

#+begin_src nix :noweb-ref no
                                             ;; :I (with [f (open (+ ctx.obj.resources "/flake.lock"))]
                                             ;;          #[f[nixpkgs=https://github.com/nixos/nixpkgs/archive/{(. (.load json f) ["nodes"] ["<<channel()>>"] ["original"] ["ref"])}.tar.gz]f])
                                             :I #[f[nixpkgs={(.strip (.eval nix :impure True :expr "(import ./etc/nixos).inputs.nixpkgs.outPath" :m/run False) "\"")}]f]
#+end_src

#+begin_src nix
                                             :m/run True
                                             :show-trace True
                                             :install-bootloader install-bootloader
                                             :option { "repeat-with-values" options }))))))
             (raise (NameError no-host-error-message)))))
#+end_src

**** Create

#+begin_src hy
#@((.command strapper :no-args-is-help True)
   (.option click "-B" "--boot-device" :type (, str int))
   (.option click "-c" "--copies" :type int :default 1)
   (.option click "-d" "--deduplicated" :is-flag True)
   (.option click "-e" "--encrypted" :is-flag True)
   (.option click "-M" "--host-mountpoint" :help "Use the hostname as the mountpoint" :is-flag True :cls oreo.Option :xor [ "mountpoint" ])
   (.option click "-m" "--mountpoint" :cls oreo.Option :xor [ "host-mountpoint" ])
   (.option click "-o" "--pool-options" :multiple True)
   (.option click "-O" "--dataset-options" :multiple True)
   (.option click
            "-P"
            "--partition"
            :multiple True
            :cls oreo.Option
            :xor [ "raid" ]
            :help "Set up an entire disk; a single `-P' sets up the boot partition with the size as the value passed in (with the unit, such as `2G' for 2 gibibytes),
a second `-P' sets up the swap space similarly, and subsequent invocations sets up further unformatted partitions.
The final partition will be the ZFS partition, and does not need to be specified.")
   (.option click "-p" "--pool-only" :is-flag True)
   (.option click "-r" "--raid" :cls oreo.Option :xor [ "partition" ])
   (.option click "-S" "--swap-device" :type (, str int))
   (.option click "-s" "--swap" :type int :default 0)
   (.option click "-z" "--zfs-devices" :required True :multiple True)
   click.pass-context
   (defn create [ ctx boot-device copies deduplicated encrypted host-mountpoint mountpoint dataset-options pool-options partition pool-only raid swap-device swap zfs-devices ]
         (if ctx.obj.host
             (try (if (= (input "THIS WILL DELETE ALL DATA ON THE SELECTED DEVICE / PARTITION! TO CONTINUE, TYPE IN 'ZFS CREATE'!\n\t") "ZFS CREATE")
                      (let [dataset-options-dict (D { "xattr"      "sa"
                                                      "acltype"    "posixacl"
                                                      "mountpoint"  (if host-mountpoint
                                                                        (+ "/" ctx.obj.host)
                                                                        (or mountpoint "none"))
                                                      "compression" "zstd-19"
                                                      "checksum"    "edonr"
                                                      "atime"       "off"
                                                      "relatime"    "off"
                                                      "copies"      copies })
                            pool-options-dict (D { "autotrim" "on"
                                                   "altroot" "/mnt"
                                                   "autoexpand" "on" })
                            command (partial zpool.create :f True :m/run True)
                            no-raid-error-message "Sorry! For multiple zfs devices a raid configuration must be provided using `-r / --raid'!"
                            zfs-device (if (= (len zfs-devices) 1)
                                        (if raid
                                            (raise (NameError no-raid-error-message))
                                            (get zfs-devices 0))
                                        (if raid
                                            #[f[{raid} {(.join " " zfs-devices)}]f]
                                            (raise (NameError no-raid-error-message))))]
                           (if (or partition boot-device)
                               (.bake- parted :m/sudo True :s True :a "optimal" "--"))
                           (if partition
                               (do (setv zfs-name ctx.obj.host)
                                   (parted zfs-device "mklabel" "gpt")
                                   (for [[i p] (enumerate partition)]
                                        (parted zfs-device
                                                "mkpart"
                                                "primary"

                                                #_(if i (get partition (dec i)) "0%")

                                                (if i (get partition (- i 1)) "0%")

                                                p))
                                   (parted zfs-device "mkpart" "primary" (get partition -1) "100%")
                                   (parted zfs-device "name" (if (> (len partition) 1) 3 2) zfs-name)))
                           (if (or partition boot-device)
                               (if boot-device
                                   (let [ device (get boot-device 0)
                                          index  (get boot-device 1) ]
                                        (parted device "mkfs" index "fat32")
                                        (parted device "set" index "boot" "on")
                                        (parted device "set" index "esp" "on"))
                                   (do (parted zfs-device "name" 1 (+ ctx.obj.host "-boot"))
                                       (parted zfs-device "mkfs" 1 "fat32")
                                       (parted zfs-device "set" 1 "boot" "on")
                                       (parted zfs-device "set" 1 "esp" "on"))))
                           (if (or (> (len partition) 1) swap-device)
                               (if swap-device
                                   (parted (get swap-device 0) "mkfs" (get swap-device 1) "linux-swap")
                                   (do (parted zfs-device "name" 2 (+ ctx.obj.host "-swap"))
                                       (parted zfs-device "mkfs" 2 "linux-swap"))))
                           (for [dataset (.list zfs :r True :H True :m/list True :m/split True)]
                                (if (in ctx.obj.host dataset)
                                    (.export zpool :f True ctx.obj.host :m/ignore-stderr True)))
                           (if encrypted
                               (setv dataset-options-dict.encryption "aes-256-gcm"
                                     dataset-options-dict.keyformat  "passphrase"))
                           (if deduplicated
                               (setv dataset-options-dict.dedup "edonr,verify"))
                           (if (.ismount os.path "/mnt")
                               (umount :R True "/mnt"))
                           (.export zpool :f True ctx.obj.host :m/ignore-stderr True)
                           (.update dataset-options-dict (dfor item pool-options :setv kv (.split item "=") [(get kv 0) (get kv 1)]))
                           (.update pool-options-dict (dfor item dataset-options :setv kv (.split item "=") [(get kv 0) (get kv 1)]))
                           (command :O { "repeat-with-values" (gfor [k v] (.items dataset-options-dict) f"{k}={v}") }
                                    :o { "repeat-with-values" (gfor [k v] (.items pool-options-dict) f"{k}={v}") }
                                    ctx.obj.host
                                    (if partition (+ "/dev/disk/by-label/" zfs-name) zfs-device))
                           (update-datasets ctx :swap swap :encrypted encrypted :deduplicated deduplicated :pool True :reserved-only pool-only))
                      (print "Sorry; not continuing!\n\n"))
                  (finally (.export zpool :f True ctx.obj.host :m/ignore-stderr True)))
             (raise (NameError no-host-error-message)))))
#+end_src

**** Mount

#+begin_src hy
#@((.command strapper :no-args-is-help True)
   (.option click "-b" "--boot-device")
   (.option click "-d" "--deduplicated" :is-flag True)
   (.option click "-e" "--encrypted" :is-flag True)
   (.option click "-r" "--root-device")
   (.option click "-s" "--swap" :cls oreo.Option :xor [ "swap-device" ] :is-flag True)
   (.option click "-S" "--swap-device" :cls oreo.Option :xor [ "swap" ])
   (.option click "-i" "--install" :is-flag True)
   (.option click "-I" "--install-bootloader" :is-flag True)
   click.pass-context
   (defn mount [ ctx boot-device deduplicated encrypted root-device swap swap-device install install-bootloader ]
         (if ctx.obj.host
             (do (update-datasets ctx :root-device root-device :encrypted encrypted :deduplicated deduplicated :swap swap)
                 (for [dataset (.list zfs :r True :H True :m/list True :m/split True)]
                      (if (in ctx.obj.host dataset)
                          (break))
                      (else (.import zpool :f True ctx.obj.host)))
                 (if encrypted
                     (.load-key zfs ctx.obj.host))
                 (try (.mkdir (Path "/mnt"))
                      (except [FileExistsError]
                              (if (.ismount os.path "/mnt")
                                  (umount :R True "/mnt"))))
                 (if root-device
                     (Mount root-device "/mnt")
                     (Mount :t "zfs" (+ ctx.obj.host "/system/root") "/mnt"))
#+end_src

Taken from [[https://github.com/NixOS/nixpkgs/issues/73404#issuecomment-1011485428][here]]:

#+begin_src hy
                 (try (.mkdir (Path "/mnt/mnt"))
                      (except [FileExistsError]
                              (if (.ismount os.path "/mnt/mnt")
                                  (umount :R True "/mnt/mnt"))))
                 (Mount :bind True "/mnt" "/mnt/mnt")
#+end_src

#+begin_src hy
                 (.mkdir (Path "/mnt/etc/nixos") :parents True :exist-ok True)

                 (.mkdir (Path "/mnt/nix") :parents True :exist-ok True)
                 (Mount :t "zfs" (+ ctx.obj.host "/system/nix") "/mnt/nix")

                 (.mkdir (Path "/mnt/persist") :parents True :exist-ok True)
                 (Mount :t "zfs" (+ ctx.obj.host "/system/persist") "/mnt/persist")

                 (if boot-device
                     (let [boot "/mnt/boot/efi"]
                          (.mkdir (Path boot) :parents True :exist-ok True)
                          (Mount boot-device boot)))
                 (if swap
                     (swapon (+ "/dev/zvol/" ctx.obj.host "/swap" :m/run True)))
                 (if swap-device
                     (swapon swap-device :m/run True))

                 (.mkdir (Path "/tmp") :parents True :exist-ok True)
                 (Mount :t "zfs" (+ ctx.obj.host "/system/tmp") "/tmp" :m/run True)

                 (.mkdir (Path "/tmp/nix") :parents True :exist-ok True)
                 (Mount :t "zfs" (+ ctx.obj.host "/system/tmp/nix") "/tmp/nix" :m/run True)

                 ;; (rsync :a True :v { "repeat" 2 } :c True :z { "repeat" 2 } :delete True "/nix/" "/tmp/nix/")
                 ;; (Mount :t "zfs" (+ ctx.obj.host "/system/tmp/nix") "/nix" :m/run True)

                 (if (or install install-bootloader)
                     (.invoke ctx main :all True :install-bootloader install-bootloader)))
             (raise (NameError no-host-error-message)))))
#+end_src

**** Update

#+begin_src hy
#@((.command strapper)
   (.option click "-d" "--deduplicated" :is-flag True)
   (.option click "-e" "--encrypted" :is-flag True)
   (.option click "-f" "--files" :is-flag True :help "Update datasets.nix with any new datasets; the default")
   (.option click "-p" "--pool" :is-flag True :help "Update the pool and datasets.nix with any new datasets")
   (.option click "-r" "--root-device")
   (.option click "-s" "--swap" :type int :default 0)
   click.pass-context
   (defn update [ ctx deduplicated encrypted files pool root-device swap ]
         (if ctx.obj.host
             (try (setv ud (partial update-datasets ctx :swap swap :encrypted encrypted :deduplicated deduplicated :root-device root-device))
                  (cond [files (ud)]
                        [pool (ud :pool True)]
                        [True (ud)])
                  (finally (.export zpool :f True ctx.obj.host :m/ignore-stderr True)))
             (raise (NameError no-host-error-message)))))
#+end_src

*** End of strapper

#+begin_src hy :noweb-ref no
(if (= __name__ "__main__")
    (strapper :obj (D {})))
#+end_src

* bin
** org-export
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

Adapted from [[https://github.com/hlissner/doom-emacs/blob/master/bin/org-tangle][here]]:

#+begin_src emacs-lisp :tangle (meq/tangle-path) :shebang "#!/usr/bin/env sh"
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; bin/org-export

;; Exports blocks from org files. Debug/info messages are directed to stderr and
;; can be ignored.
;;
;;   -a/--all
;;     Export all blocks by default (unless it has :exports none set or a
;;     :noexport: tag)
;;   -t/--tag TAG
;;      --and TAG
;;      --or TAG
;;     Only include blocks in trees that have these tags. Combine multiple --and
;;     and --or's, or just use --tag (implicit --and).
;;   -p/--print
;;     Prints exported code to stdout instead of to files
;;
;; Usage: org-export some-file.org another.org
;; Examples:
;;   org-export -l sh modules/some/module/README.org > install_module.sh
;;   org-export -l sh modules/lang/go/README.org | sh
;;   org-export --and tagA --and tagB my/literate/config.org

(require 'cl-lib)
(require 'ox)
(require 'ox-html)
(load-file (concat (file-name-directory (or load-file-name buffer-file-name)) "org-export-functions.el"))

(setq debug-on-error t)

(defun usage ()
  (with-temp-buffer
    (insert (format "%s %s [OPTIONS] [TARGETS...]\n"
                    "[1mUsage:[0m"
                    (file-name-nondirectory load-file-name))
            "\n"
            "A command line interface for tangling org-mode files. TARGETS can be\n"
            "files or folders (which are searched for org files recursively).\n"
            "\n"
            "This is useful for literate configs that rely on command line\n"
            "workflows to build it.\n"
            "\n"
            "[1mExample:[0m\n"
            "  org-export some-file.org\n"
            "  org-export literate/config/\n"
            "  org-export -p -l sh scripts.org > do_something.sh\n"
            "  org-export -p -l python -t tagA -t tagB file.org | python\n"
            "\n"
            "[1mOptions:[0m\n"
            "  -a --all\t\tExport all blocks by default\n"
            "  -p --print\t\tPrint exported output to stdout than to files\n"
            "  -t --tag TAG\n"
            "     --and TAG\n"
            "     --or TAG\n"
            "    Lets you export org blocks by tag. You may have more than one\n"
            "    of these options.\n")
    (princ (buffer-string))))

(defun *org-babel-export (fn &rest args)
  "Don't write exported blocks to files, print them to stdout."
  (cl-letf (((symbol-function 'write-region)
             (lambda (start end filename &optional append visit lockname mustbenew)
               (princ (buffer-string)))))
    (apply fn args)))

(defvar all-blocks nil)
(defvar and-tags nil)
(defvar or-tags nil)
(let (srcs and-tags or-tags)
  (pop argv)
  (while argv
    (let ((arg (pop argv)))
      (pcase arg
        ((or "-h" "--help")
         (usage)
         (error ""))
        ((or "-a" "--all")
         (setq all-blocks t))
        ((or "-p" "--print")
         (advice-add #'org-html-export-to-html :around #'*org-babel-export))
        ((or "-t" "--tag" "--and")
         (push (pop argv) and-tags))
        ("--or"
         (push (pop argv) or-tags))
        ((guard (file-directory-p arg))
         (setq srcs
               (append (directory-files-recursively arg "\\.org$")
                       srcs)))
        ((guard (file-exists-p arg))
         (push arg srcs))
        (_ (error "Unknown option or file: %s" arg)))))

  (dolist (file srcs)
                (message (format "\n\nNow exporting %s:\n" file))
    (let ((backup (make-temp-file (file-name-base file) nil ".backup.org")))
      (unwind-protect
          ;; Prevent slow hooks from interfering
          (let (org-mode-hook org-confirm-babel-evaluate)
               (with-current-buffer (find-file-noselect file)
               (org-html-export-to-html)))
        (ignore-errors (delete-file backup)))))
  (kill-emacs 0))
#+end_src

** org-export-functions.el
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref 11788ba8-f3e9-4122-8cb4-d4c18d4f031d
:END:

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L3471][here]], and inspired by [[https://stackoverflow.com/users/569280/ebpa][ebpa's]] answer [[https://stackoverflow.com/a/37404938][here]]:

#+begin_src text :tangle (meq/tangle-path) :exports none
<<11788ba8-f3e9-4122-8cb4-d4c18d4f031d>>
#+end_src

#+name: 777bbfd5-1d72-49ff-89d6-b3e7e8fc7609
#+begin_src emacs-lisp
(setq org-export-functions-directory (file-name-directory (or load-file-name buffer-file-name))
      windows (member system-type '(windows-nt ms-dos)))
(defun meq/oefd (&rest args) (apply #'concat org-export-functions-directory (mapcar #'(lambda (arg) (concat (if windows "\\" "/") arg)) args)))
#+end_src

~Note:~ ~org-tangle-functions.el~ is required due to [[https://github.com/bzg/org-mode/blob/d2f4d4b457a9fe7a7dbcfbd2d71c723ffa8c2726/lisp/ob-core.el#L625][this]].

#+begin_src emacs-lisp
(load-file (meq/oefd "org-tangle-functions.el"))
#+end_src

~Note:~ From [[https://narkive.com/69IaWEJV:2.1599.178][here]]:

#+begin_quote
The value of the variable is saved to the file when emacs exits and when org-id-find is called and cannot find the id (I think),
or you eval ~(org-id-locations-save)~ explicitly.
#+end_quote

#+begin_src emacs-lisp
(defun meq/org-html-src-block (src-block _contents info)
  "Transcode a SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (if (org-export-read-attribute :attr_html src-block :textarea)
      (org-html--textarea-block src-block)
    (let* ((lang (org-element-property :language src-block))
           (lang (cond ((member lang '("emacs-lisp")) "lisp")
                       ((member lang '("shell" "zsh" "bash")) "sh")
                       ((member lang '("text")) "plaintext")
                       (t lang)))
           (code (org-html-format-code src-block info))
           (label (let ((lbl (org-html--reference src-block info t)))
                    (if lbl (format " id=\"%s\"" lbl) "")))
           (klipsify  (and  (plist-get info :html-klipsify-src)
                            (member lang '("javascript" "js"
                                           "ruby" "scheme" "clojure" "php" "html")))))
      (if (not lang) (format "<pre class=\"example\"%s>\n%s</pre>" label code)
        (format "<div class=\"org-src-container\">\n%s%s\n</div>"
                ;; Build caption.
                (let ((caption (org-export-get-caption src-block)))
                  (if (not caption) ""
                    (let ((listing-number
                           (format
                            "<span class=\"listing-number\">%s </span>"
                            (format
                             (org-html--translate "Listing %d:" info)
                             (org-export-get-ordinal
                              src-block info nil #'org-html--has-caption-p)))))
                      (format "<label class=\"org-src-name\">%s%s</label>"
                              listing-number
                              (org-trim (org-export-data caption info))))))
                ;; Contents.
                (if klipsify
                    (format "<pre><code class=\"src src-%s\"%s%s>%s</code></pre>"
                            lang
                            label
                            (if (string= lang "html")
                                " data-editor-type=\"html\""
                              "")
                            code)
                  (format "<pre><code class=\"language-%s match-braces rainbow-braces\"%s>%s</code></pre>"
                          lang label code)))))))
        (advice-add #'org-html-src-block :override #'meq/org-html-src-block)
#+end_src

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L2701][here]], and inspired by [[https://stackoverflow.com/users/569280/ebpa][ebpa's]] answer [[https://stackoverflow.com/a/37404938][here]]:

#+begin_src emacs-lisp
(defun meq/org-html-inline-src-block (inline-src-block _contents info)
  "Transcode an INLINE-SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (let* ((lang (org-element-property :language inline-src-block))
         (code (org-html-fontify-code
                (org-element-property :value inline-src-block)
                lang))
         (label
          (let ((lbl (org-html--reference inline-src-block info t)))
            (if (not lbl) "" (format " id=\"%s\"" lbl)))))
    (format "<code class=\"language-%s match-braces rainbow-braces\"%s>%s</code>" lang label code)))
(advice-add #'org-html-inline-src-block :override #'meq/org-html-inline-src-block)
#+end_src

Adapted from [[https://github.com/bzg/org-mode/blob/main/lisp/ox-html.el#L2676][here]]:

#+begin_src emacs-lisp
(defun meq/org-html-format-headline-default-function
    (todo _todo-type priority text tags info)
  "Default format function for a headline.
See `org-html-format-headline-function' for details."
  (let ((todo (org-html--todo todo info))
        (priority (org-html--priority priority info))
        (tags (org-html--tags tags info)))
    (concat todo (and todo " ")
            priority (and priority " ")
            text
            (and tags "&#xa0;") tags)))
(advice-add #'org-html-format-headline-default-function :override #'meq/org-html-format-headline-default-function)
#+end_src

** uuidgen.el
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

#+name: 1bd4402b-45b5-4376-b0f0-4e3ba9af06be
#+begin_src emacs-lisp :eval never-export :cache no
(setq uuidel (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/kanru/uuidgen-el/master/uuidgen.el 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= uuidel "")
    (thread-first org-tangle-directory
                  (concat "uuidgen.el")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    uuidel)
#+end_src

#+begin_src emacs-lisp :tangle (meq/tangle-path)
<<1bd4402b-45b5-4376-b0f0-4e3ba9af06be()>>
#+end_src

** a.el
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

#+name: b3cdb1c4-3efd-48cb-addd-1f92ecc62004
#+begin_src emacs-lisp :eval never-export :cache no
(setq ael (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/plexus/a.el/master/a.el 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= ael "")
    (thread-first org-tangle-directory
                  (concat "a.el")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    ael)
#+end_src

#+begin_src emacs-lisp :tangle (meq/tangle-path)
<<b3cdb1c4-3efd-48cb-addd-1f92ecc62004()>>
#+end_src

** dash.el
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

#+name: d96d8be0-3f8f-4611-8892-48f62de2333f
#+begin_src emacs-lisp :eval never-export
(setq dashel (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/magnars/dash.el/master/dash.el 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= dashel "")
    (thread-first org-tangle-directory
                  (concat "dash.el")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    dashel)
#+end_src

#+begin_src emacs-lisp :tangle (meq/tangle-path)
<<d96d8be0-3f8f-4611-8892-48f62de2333f()>>
#+end_src

** s.el
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

#+name: 5bc3d6cb-1cbf-45f9-a078-ba31dd16d4ce
#+begin_src emacs-lisp :eval never-export :cache no
(setq sel (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/magnars/s.el/master/s.el 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= sel "")
    (thread-first org-tangle-directory
                  (concat "s.el")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    sel)
#+end_src

#+begin_src emacs-lisp :tangle (meq/tangle-path)
<<5bc3d6cb-1cbf-45f9-a078-ba31dd16d4ce()>>
#+end_src

** f.el
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

#+name: e94a72ac-5183-4d7c-bf48-2d0f93bace65
#+begin_src emacs-lisp :eval never-export :cache no
(setq fel (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/rejeep/f.el/master/f.el 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= fel "")
    (thread-first org-tangle-directory
                  (concat "f.el")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    fel)
#+end_src

#+begin_src emacs-lisp :tangle (meq/tangle-path)
<<e94a72ac-5183-4d7c-bf48-2d0f93bace65()>>
#+end_src

** org-tangle
:PROPERTIES:
:header-args:emacs-lisp+: :comments none
:END:

Adapted from [[https://gnu.emacs.help.narkive.com/xdeUFCnw/double-backslash-problem-in-elisp#post2][here]]:

#+name: 20220211200359152893769
#+begin_src emacs-lisp :eval never-export :cache no
(setq doom-tangle (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/hlissner/doom-emacs/master/bin/org-tangle 2> /dev/null")
      org-tangle-directory-function "(file-name-directory (or load-file-name buffer-file-name))")
(if (string= doom-tangle "")
    (thread-first org-tangle-directory
                  (concat "org-tangle.sh")
                  (insert-file-contents)
                  (with-temp-buffer (buffer-string)))
    (thread-last doom-tangle
        (replace-regexp-in-string "(require 'ob-tangle)"
                                  (format (concat "(require 'ob-tangle)"
                                                  "\n"
                                                  "(load-file (concat %s \"org-tangle-functions.el\"))")
                                          org-tangle-directory-function))
        (replace-regexp-in-string "(org-mode-hook org-confirm-babel-evaluate)" "(org-mode-hook org-confirm-babel-evaluate make-backup-files)")
        (replace-regexp-in-string "(dolist (file srcs)" "(dolist (file srcs)\n\t\t(message (format \"\\\\n\\\\nNow tangling %s:\\\\n\" file))")
        (replace-regexp-in-string "(org-export-expand-include-keyword)" ";; (org-export-expand-include-keyword)")))
#+end_src

#+begin_src shell :tangle (meq/tangle-path)
<<20220211200359152893769()>>
#+end_src

** org-tangle-functions.el
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref c2b376ba-f828-4ab9-8379-234a382c279e
:END:

#+begin_src text :tangle (meq/tangle-path) :exports none
<<c2b376ba-f828-4ab9-8379-234a382c279e>>
#+end_src

The tangle functions are adapted from [[https://emacs.stackexchange.com/a/29884/31428][this answer on the emacs Stack Exchange]], written by [[https://emacs.stackexchange.com/users/2710/andrew-swann][Andrew Swann]]:

#+begin_src emacs-lisp
<<777bbfd5-1d72-49ff-89d6-b3e7e8fc7609>>
(mapc (lambda (file) (load-file (meq/oefd (concat file ".el")))) '(
    "uuidgen"
    "a"
    "dash"
    "s"
#+end_src

Must be last; [[https://github.com/rejeep/f.el][f.el]] requires [[https://github.com/magnars/dash.el][dash.el]] and [[https://github.com/magnars/s.el][s.el]]

#+begin_src emacs-lisp
    "f"
#+end_src

#+begin_src emacs-lisp
))
#+end_src

Adapted from [[https://github.com/emacs-mirror/emacs/blob/master/lisp/org/ob-core.el#L825][here]] and [[https://lists.gnu.org/archive/html/emacs-orgmode/2018-12/msg00048.html][here]];
[[https://emacs.stackexchange.com/users/468/david-ongaro][David Ongaro's]] answer [[https://emacs.stackexchange.com/a/29132/31428][here]] is also useful, but doesn't expand ~noweb~ coderefs:

#+begin_src emacs-lisp
(defun meq/org-babel-expand-src-block (&optional _arg datum info params)
  "Expand the current source code block.
Expand according to the source code block's header
arguments and pop open the results in a preview buffer."
  (interactive)
  (let* ((datum (or datum (let ((org-babel-current-src-block-location (org-element-property :begin  (org-element-context))))
                            (org-with-point-at org-babel-current-src-block-location
                            (org-babel-params-from-properties lang)))))
         (info (or info (org-babel-get-src-block-info datum)))
         (lang (nth 0 info))
         (params (setf (nth 2 info)
                    (sort (org-babel-merge-params (nth 2 info) params) (lambda (el1 el2) (string< (symbol-name (car el1)) (symbol-name (car el2)))))))
         (body (setf (nth 1 info) (if (org-babel-noweb-p params :eval) (org-babel-expand-noweb-references info) (nth 1 info))))
         (expand-cmd (intern (concat "org-babel-expand-body:" lang)))
         (assignments-cmd (intern (concat "org-babel-variable-assignments:" lang)))
         (expanded (if (fboundp expand-cmd)
                    (funcall expand-cmd body params)
                    (org-babel-expand-body:generic body params (and (fboundp assignments-cmd) (funcall assignments-cmd params))))))
    (if (called-interactively-p 'any)
        (org-edit-src-code expanded (concat "*Org-Babel Preview " (buffer-name) "[ " lang " ]*"))
        expanded)))
#+end_src

#+begin_src emacs-lisp
(defun meq/get-header nil (interactive) (nth 4 (org-heading-components)))
(defun meq/get-theme-from-header nil (interactive) (s-chop-suffix "-theme.el" (meq/get-header)))

(defun meq/tangle-multi (dont-check-car &rest paths) (interactive)
    (let* ((body (meq/org-babel-expand-src-block)))
        (mapc (lambda (path) (let* ((path (f-expand (substitute-in-file-name path)))
                                    (exists (f-exists? path)))
                                (if exists
                                    (unless (string= body (s-trim (f-read path))) (f-write body 'utf-8 path))
                                    (f-write body 'utf-8 path)))) (cdr paths))
        (let* ((path (f-expand (substitute-in-file-name (car paths))))
                (exists (f-exists? path)))
            (if (or dont-check-car (not exists))
                path
                (if (string= body (s-trim (f-read path))) path "no")))))
(defun meq/tangle-path nil (interactive)
    (let* ((path (s-chop-prefix "/" (f-join (org-format-outline-path (org-get-outline-path)) (meq/get-header))))
            (exists (f-exists? path)))
        (if exists
            (if (string= (meq/org-babel-expand-src-block) (s-trim (f-read path))) "no" path)
            path)))
(defun meq/tangle-multipath (&rest paths) (interactive) (apply #'meq/tangle-multi t (add-to-list 'paths (meq/tangle-path))))
#+end_src

#+begin_src emacs-lisp
(defun get-README (&optional return-link) (interactive)
    (let* ((README (f-join "settings" "README.org"))
        (flake-settings (s-trim (shell-command-to-string "nix eval --impure --expr \"(import ./.).inputs.settings.outPath\" | tr -d '\"' 2> /dev/null")))
        (flake-README (unless (s-blank? flake-settings) (f-expand (f-join flake-settings "README.org"))))
        (repo-README (f-expand README))
        (home-README (f-expand (f-join "~" README)))
        (user-README (f-expand (f-join "<<userrepo>>" README)))
        (root-README (f-expand (f-join "/" README)))
        (env (getenv "SETTINGS_README"))
        (env-README (unless (s-blank? env) (f-expand (substitute-in-file-name env))))
        (file (cond
                ((f-exists? README) (concat "./" README))
                ((f-exists? flake-README) flake-README)
                ((f-exists? repo-README) repo-README)
                ((f-exists? home-README) home-README)
                ((f-exists? user-README) user-README)
                ((f-exists? root-README) root-README)
                ((unless (s-blank? env) (f-exists? env-README)) env-README)
                (t (if return-link
                    "https://raw.githubusercontent.com/sylvorg/settings/main/README.org"
                    (let* ((curl-README (shell-command-to-string "curl -fsSL https://raw.githubusercontent.com/sylvorg/settings/main/README.org 2> /dev/null")))
                        (unless (s-blank? curl-README)
                            (let* ((temp (make-temp-file (uuidgen-5 (uuidgen-4) (uuidgen-4)))))
                                (f-write curl-README 'utf-8 temp)
                                temp))))))))
    file))

(defun org-babel-pre-tangle-hooks nil (interactive)
    (let* (
#+end_src

Adapted from [[https://stackoverflow.com/users/109169/netawater][netawater's]] answer [[https://stackoverflow.com/a/17310307/10827766][here]]:

#+begin_src emacs-lisp
            (headlines (org-element-map
                        (org-element-parse-buffer 'headline)
                        'headline
                        (lambda (headline) (downcase (org-element-property :title headline)))))
#+end_src

Adapted from [[https://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/][here]]:

#+begin_src emacs-lisp
            (keywords (org-element-map
                        (org-element-parse-buffer 'element)
                        'keyword
                        (lambda (keyword) (cons (downcase (org-element-property :key keyword)) (org-element-property :value keyword))))))
#+end_src

#+begin_src emacs-lisp
        (unless (or (member "nosetupfile" (a-keys keywords)) (member "no setupfile" headlines))
            (goto-char 0)
            (insert (format "#+setupfile: %s\n\n" (get-README t)))
            (goto-char 0)
            (org-ctrl-c-ctrl-c)))
#+end_src

Adapted from [[https://stackoverflow.com/users/3258545/amd][amd's]] answer [[https://stackoverflow.com/a/27158715/10827766][here]] (no longer used):

#+begin_src emacs-lisp :noweb-ref no
    (require 'org-id)
    (setq org-id-locations-file (meq/oefd ".org-id-locations")
            org-id-files (list load-file-name
                                buffer-file-name
                                (meq/oefd "README.org"))
            org-id-link-to-org-use-id t)
    (org-id-update-id-locations)
#+end_src

#+begin_src emacs-lisp
    (setq org-src-preserve-indentation t)
    (let* ((file (get-README))) (when file (org-babel-lob-ingest file)))
    (org-export-expand-include-keyword))

(mapc (lambda (hook) (interactive) (add-hook hook 'org-babel-pre-tangle-hooks)) '(org-babel-pre-tangle-hook org-export-before-processing-hook))
#+end_src

** org-interpreter
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref 101ff611-520c-4c0b-ad0c-01937a1250e5
:END:

#+begin_src text :tangle (meq/tangle-path) :shebang "#!/usr/bin/env sh" :exports none
<<101ff611-520c-4c0b-ad0c-01937a1250e5>>
#+end_src

Inspired by [[https://www.reddit.com/r/emacs/comments/t0yy91/comment/hycx6o2/?utm_source=share&utm_medium=web2x&context=3][this comment on reddit]].

~Note:~ For ~hy / hylang~ blocks, for print statements to work, you need to use ~:results silent output~,
as noted [[https://www.reddit.com/r/emacs/comments/t0yy91/comment/hyfkfhi/?utm_source=share&utm_medium=web2x&context=3][here]].
The two print statements you need to know are:

#+begin_src hy
(print "Hello, world!")
#+end_src

And:

#+begin_src hy
(import sys)
(.write sys.stdout "Hello, world!")
#+end_src

The former prints the output with a visible newline / carriage return, while the latter does not.

#+begin_src emacs-lisp
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
(pop argv)

(require 'org-element)

(defun require-lang (lang)
    (defvar bootstrap-version)
    (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
    (pcase (downcase lang)
        ((or "hy" "hylang") (use-package ob-hy :demand t :straight '(ob-hy :type git :host github :repo "allison-casey/ob-hy") :init (setq org-babel-hy-command "/usr/bin/env hy")))))

(defun message-advice (func &rest args) (interactive)
    (let* ((*message (apply #'format args)))
        (unless (or (string-prefix-p "executing" *message)
                    (string-prefix-p "Code block" *message))
            (apply func args))))
(advice-add #'message :around #'message-advice)

(defun org-babel-eval-error-notify-advice (exit-code stderr)
  "Open a buffer to display STDERR and a message with the value of EXIT-CODE."
  (let ((buf (get-buffer-create org-babel-error-buffer-name)))
    (with-current-buffer buf
      (goto-char (point-max))
      (save-excursion (insert stderr))
      (message (buffer-string)))
    (display-buffer buf))
  (message "Babel evaluation exited with code %S" exit-code))
(advice-add #'org-babel-eval-error-notify :override #'org-babel-eval-error-notify-advice)

(let ((org-confirm-babel-evaluate)
        (lang-list '()))
    (with-temp-buffer
        (while argv
            (let ((arg (pop argv)))
                (pcase arg
                    ((or "-l" "--languages")
                        (while (and (> (length argv) 1) (not (string-prefix-p "-" (car argv))))
                            (add-to-list 'lang-list (pop argv) t)))
                    (_ (setq file arg)))))
        (insert-file-contents file)
        (mapc 'require-lang lang-list)
#+end_src

Source [[https://github.com/bzg/org-mode/blob/main/lisp/ob-core.el#L1258][here]]:

#+begin_src emacs-lisp
        (org-babel-execute-buffer)))
#+end_src

* makefile

#+begin_src makefile :tangle (meq/tangle-path)
.RECIPEPREFIX := |
.DEFAULT_GOAL := super-push

# Adapted From: https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))
chmodBin := chmod +x $(mkfileDir)/bin/*

pre-init:
|-fd . $(mkfileDir)/.. -HIt d -t e -x rm -rf

tangle-setup:
|cp $(mkfileDir)/bin/org-tangle $(mkfileDir)/bin/backup-tangle
|$(chmodBin)

tangle: tangle-setup
|yes yes | fd . $(mkfileDir)/.. \
    -HId 1 -e org \
    -x $(mkfileDir)/bin/backup-tangle
|$(chmodBin)

pull: subinit
|git -C $(mkfileDir)/.. pull

add:
|git -C $(mkfileDir)/.. add .

commit:
|-git -C $(mkfileDir)/.. commit --allow-empty-message -am ""

cammit: pre-init add commit

push: cammit
|-git -C $(mkfileDir)/.. remote set-url --push origin git@github.com:<<username>>/$$(basename `git -C $(mkfileDir)/.. config --get remote.origin.url`)
|-git -C $(mkfileDir)/.. push 2>/dev/null || git -C $(mkfileDir)/.. push origin HEAD:$$(git -C $(mkfileDir)/.. remote show origin | grep "HEAD branch" | sed 's/.*: //')

push-me: tangle-setup
|yes yes | fd . $(mkfileDir) \
    -HId 1 -e org \
    -x $(mkfileDir)/bin/backup-tangle.sh
|-fd . $(mkfileDir) -HIt d -t e -x rm -rf
|git -C $(mkfileDir) add .
|-git -C $(mkfileDir) commit --allow-empty-message -am ""
|-git -C $(mkfileDir) remote set-url --push origin git@github.com:<<username>>/$$(basename `git -C $(mkfileDir) config --get remote.origin.url`)
|-git -C $(mkfileDir) push 2>/dev/null || git -C $(mkfileDir) push origin HEAD:$$(git -C $(mkfileDir) remote show origin | grep "HEAD branch" | sed 's/.*: //')

super-push: tangle push
#+end_src

* Addendum

These are just a few blocks I use regularly in my ~org~ files, whether in ~noweb~, naming, or otherwise:

#+name: username
#+begin_src text
shadowrylander
#+end_src

#+name: userhome
#+begin_src text
/home/<<username>>
#+end_src

#+name: reponame
#+begin_src text
aiern
#+end_src

#+name: userrepo
#+begin_src text
<<userhome>>/<<reponame>>
#+end_src

#+name: email
#+begin_src text
titaniumfiles@outlook.com
#+end_src

#+name: hostname
#+begin_src emacs-lisp
(system-name)
#+end_src

#+name: users
#+begin_src json
{
    "primary": "<<username>>",
    "secondary": "frost",
    "nightingale": "curtis"
}
#+end_src

#+name: homes
#+begin_src json
{
    "primary": "<<userhome>>",
    "secondary": "/home/frost",
    "nightingale": "/home/curtis"
}
#+end_src

Adapted from [[https://unix.stackexchange.com/users/37512/timo-tijhof][Timo Tijhof's]] answer [[https://unix.stackexchange.com/a/81699/270053][here]]:

#+begin_src shell
dig @ns1.google.com TXT o-o.myaddr.l.google.com +short -4 | tr -d '"' 2> /dev/null || \
dig @resolver3.opendns.com myip.opendns.com +short -4 2> /dev/null || \
dig @resolver4.opendns.com myip.opendns.com +short -4 2> /dev/null || \
dig @ns1-1.akamaitech.net ANY whoami.akamai.net +short -4 2> /dev/null
#+end_src

#+name: extip
#+begin_src emacs-lisp
(shell-command-to-string (concat "dig @ns1.google.com TXT o-o.myaddr.l.google.com +short -4 | tr -d '\"' 2> /dev/null || "
                                 "dig @resolver3.opendns.com myip.opendns.com +short -4 2> /dev/null || "
                                 "dig @resolver4.opendns.com myip.opendns.com +short -4 2> /dev/null || "
                                 "dig @ns1-1.akamaitech.net ANY whoami.akamai.net +short -4 2> /dev/null"))
#+end_src

#+name: ssh-pubkey-id-rsa-bak
#+begin_src text
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDlwBJ7E2qeqw9kMW19indbeLdnEKs/Yrhn9HE0c/gZDzvXYBPQYyf5xr9I9kYxWcHlqp7XEI0LVT4DCA/mgemQtM8ulc1mxwekKtk64uWRi5wLi1E17NWKJfXWRn8XZejwi0iJa0twwVE8m8G2AuFOCSa86sYD3x5X5W+7spAuNET7kl0DLueUHu1u31c7HE1ciV2tIn/f60/bbgEJm9MPcRVZkRxkp+bouaZ1cjWRYDhvyJS30DRhBYtIIort2XVAshQs2Y58oKeCDnjt0gxotfqqWlt4nTQzKtbSN2M6/M+clFQBdT1oUJqpTUJbVxK8+xSEOJcBubupTj0USpmftDf/3WMoMwq+hNEc9C0EN1BYtKk68QWhAz8NROvnx7h6y3UKejhQOg0ueNZggmeNJLbebEs46QmA92khO8zc2pfBRsEa5yP0IgdvWpruTZ1QwjqhGQqGnCw3Oli1PK+5zgT2vXy5yHl3f3duPq8h+LOc+lSBbi2jjkC0gwTQDDDNyzFZ+U9xF7fCmL3V8DCEeO/4HqVxmLJir2TVEDo/3Ug/Q22Yp7P2EZrI2pikZIyBJc5aZJO3d7nGoDB/1BJp9Qm82wvyEpjiOnxHsL4osUqrf401XbiwNqpFkVUoRZkwGraJnrlsYkdHS2Mrrny9sr+PtgZhTjqIuW8z6iVIfQ== titaniumfiles@outlook.com
#+end_src

#+name: ssh-pubkey-id-ed25519-bak
#+begin_src text
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO8NzKV52dRBAir8ARoFJX/xQDVCNup6xe1ddX1YVXSO sylvorg@syvl.org
#+end_src

#+name: ssh-pubkey-jeet-ray-ecdsa
#+begin_src text
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGsRy6rLDzmLNISdWahFLGDo+ZZLbndj6k8Q8MUQum/mPAzy8lsAQz/0XiicJz7LlM74tWGDYSJG1Ay2Iyc/ew4= jeet.ray@syvl.org
#+end_src

#+name: ssh-pubkey-jeet-ray-ed25519
#+begin_src text
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICor+WXoAypnk5rkgTljAN6kk8olvKWqtnmGWVuQu8z9 jeet.ray@syvl.org
#+end_src

#+name: ssh-pubkey-jeet-ray-rsa
#+begin_src text
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4zqEt/Fkjw0LVQTwJXlovmnqqGWC4UOVPvoLDvo0JD6WeVBDi4cFPX2mpNJYmYJsBLDXeUq5XrQ1ST3BkfVdspsragnD7O92tTEf3/VHfIC1L165pnB08FXQrtIjyLL7Ry4dloUGBYKLnHOtnXlpefKMQzRYUacc7Tr1o2wv+XRoDW9h+qDqJz1O61N68JFLgJWD3/nUkm8siTg1OLvqO9ATp+UgP/Lb08E6HfqYOiD8H+1ZJjz78mo5oZatknvgy8uJJPqEX7/aRM61YA9TG+tw/sf6wlrDtUQUik8Y4k1DLmkhE15wcgq/HF2Rqka/acA9GxA5smNGyjs6CS+H jeet.ray@syvl.org
#+end_src

#+name: ssh-pubkey-shadowrylander-ecdsa
#+begin_src text
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNlVuY9reRuMloYvecJHHsOYkAPDyQwELOI3kfibslIKI5hY+o1jx5yVyAUomHynP6wulm5aziNc5kWdsRE9BE8= shadowrylander@syvl.org
#+end_src

#+name: ssh-pubkey-shadowrylander-ed25519
#+begin_src text
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINZ2FCMbnetAnDZ63Wzct+O3MYhtO9+BedATbtiHI9BT shadowrylander@syvl.org
#+end_src

#+name: ssh-pubkey-shadowrylander-rsa
#+begin_src text
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP8ifT/3d6L2MzZPoTh0bUjQUXuPKfPP8Tp03E5En2x+iKhv+J/U0z0xk7IdPZ4qEO+ZWI5xWbwVkDdnRnJ/5HgA0/ZwmO5Zpj3llSr4dJMUVSSyO23fFIL2WqOpHyQDeexJWMxbU5SmIi+c855VwewCbGDcPnmDo0XgR/u4LRF2pwYGNGFtJ2/GICEIob/2w0ICwi7TMUEkDbUFcP5web81OzsNu80M60VaNl870uT1rwBeKuW7CXFtImYytZ0mOc5LC6d7ugkFS1zAbLOWjt3PJ8Op2MH9ncBj5jCsIlA/OqI72jKwEPOl8evYqWeEOzlVxA7/AkRj7haQqFE8r/ shadowrylander@syvl.org
#+end_src

#+name: primary-distro
#+begin_src text
nixos
#+end_src

#+name: channel
#+begin_src emacs-lisp :var dotted='nil
(format "nixos-22%s05" (if dotted "." "-"))
#+end_src

Adapted from [[https://github.com/divnix/digga/blob/main/examples/devos/flake.nix#L4][here]]:

#+name: generate-nix-conf
#+begin_src emacs-lisp :var delim="" comment="" quoted='nil flake='nil
(format-spec "# extra-substituters = %qhttps://cache.nixos.org/ https://nix-community.cachix.org/%q%d
trusted-substituters = %qhttps://cache.nixos.org/%q%d
# extra-trusted-public-keys = %qcache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=%q%d
trusted-public-keys = %qcache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=%q%d
%ckeep-derivations = true%d
%ckeep-outputs = true%d
extra-experimental-features = %qnix-command flakes%q%d
%caccept-flake-config = true%d
%cflake-registry = https://raw.githubusercontent.com/sylvorg/settings/main/flake-registry.json%d
%callow-unsafe-native-code-during-evaluation = true%d
%cmin-free = 262144000%d
%cmax-free = 1073741824%d" `((?d . ,(if flake ";" delim)) (?c . ,(if flake "# " comment)) (?q . ,(if (or flake quoted) "\"" ""))))
#+end_src

# Adapted From: https://www.reddit.com/r/emacs/comments/4o9f0e/anyone_have_disabled_parts_of_their_config_being/d4apjey?utm_source=share&utm_medium=web2x&context=3

#+name: hash-deprecated
#+begin_src emacs-lisp :var name="" :tangle no
(md5 (concat (replace-regexp-in-string "/" "" (
    org-format-outline-path (org-get-outline-path))) (
        nth 4 (org-heading-components)) name))
#+end_src

#+name: hash
#+begin_src emacs-lisp :tangle no
(format-time-string "%Y%m%d%H%M%S%N")
#+end_src