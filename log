Loading /home/shadowrylander/shadowrylander/settings/bin/org-tangle-functions.el (source)...
Loading /home/shadowrylander/shadowrylander/settings/bin/uuidgen.el (source)...
Loading /home/shadowrylander/shadowrylander/settings/bin/a.el (source)...
Loading /home/shadowrylander/shadowrylander/settings/bin/dash.el (source)...
Loading /home/shadowrylander/shadowrylander/settings/bin/s.el (source)...
Loading /home/shadowrylander/shadowrylander/settings/bin/f.el (source)...


Now tangling README.org:

Could not read org-id-values from ~/.emacs.d/.org-id-locations.  Setting it to nil.
36 source blocks added to Library of Babel
Wrong type argument: sequencep, #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (nil (("emacs-lisp" "(format-time-string \"%Y%m%d%H%M%S%N\")" ((:results . "replace") (:exports . "code") (:tangle . "no") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:hlines . "no") ...) "" "hash" 301124 "(ref:%s)") ("emacs-lisp" "(md5 (concat (replace-regexp-in-string \"/\" \"\" (
    org-format-outline-path (org-get-outline-path))) (
        nth 4 (org-heading-components)) name))" ((:results . "replace") (:exports . "code") (:var . "name=\"\"") (:tangle . "no") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") ...) "" "hash-deprecated" 300903 "(ref:%s)") ("emacs-lisp" "(format-spec \"# extra-substituters = %qhttps://cache.nixos.org/ https://nix-community.cachix.org/%q%d
trusted-substituters = %qhttps://cache.nixos.org/%q%d
# extra-trusted-public-keys = %qcache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=%q%d
trusted-public-keys = %qcache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=%q%d
%ckeep-derivations = true%d
%ckeep-outputs = true%d
extra-experimental-features = %qnix-command flakes%q%d
%caccept-flake-config = true%d
%cshow-trace = true%d
%cfallback = true%d
%cauto-optimise-store = true%d
%cbuilders-use-substitutes = true%d
%ccores = 0%d
%cflake-registry = https://raw.githubusercontent.com/sylvorg/settings/main/flake-registry.json%d
%callow-unsafe-native-code-during-evaluation = true%d
%cmin-free = 262144000%d
%cmax-free = 1073741824%d\" `((?d . ,(if flake \";\" delim)) (?c . ,(if flake \"# \" comment)) (?q . ,(if (or flake quoted) \"\\\"\" \"\"))))" ((:results . "replace") (:exports . "code") (:var . "delim=\"\"") (:var . "comment=\"\"") (:var . "quoted='nil") (:var . "flake='nil") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") ...) "" "generate-nix-conf" 299718 "(ref:%s)") ("emacs-lisp" "(format \"nixos-22%s05\" (if dotted \".\" \"-\"))" ((:results . "replace") (:exports . "code") (:var . "dotted='nil") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" "channel" 299502 "(ref:%s)") ("text" "nixos" ((:results . "replace") (:exports . "code") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") (:session . "none")) "" "primary-distro" 299452 "(ref:%s)") ("text" "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP8ifT/3d6L2MzZPoTh0bUjQUXuPKfPP8Tp03E5En2x+iKhv+J/U0z0xk7IdPZ4qEO+ZWI5xWbwVkDdnRnJ/5HgA0/ZwmO5Zpj3llSr4dJMUVSSyO23fFIL2WqOpHyQDeexJWMxbU5SmIi+c855VwewCbGDcPnmDo0XgR/u4LRF2pwYGNGFtJ2/GICEIob/2w0ICwi7TMUEkDbUFcP5web81OzsNu80M60VaNl870uT1rwBeKuW7CXFtImYytZ0mOc5LC6d7ugkFS1zAbLOWjt3PJ8Op2MH9ncBj5jCsIlA/OqI72jKwEPOl8evYqWeEOzlVxA7/AkRj7haQqFE8r/ shadowrylander@syvl.org" ((:results . "replace") (:exports . "code") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") (:session . "none")) "" "ssh-pubkey-shadowrylander-rsa" 298996 "(ref:%s)") ("text" "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINZ2FCMbnetAnDZ63Wzct+O3MYhtO9+BedATbtiHI9BT shadowrylander@syvl.org" ((:results . "replace") (:exports . "code") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") (:session . "none")) "" "ssh-pubkey-shadowrylander-ed25519" 298825 "(ref:%s)") ("text" "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNlVuY9reRuMloYvecJHHsOYkAPDyQwELOI3kfibslIKI5hY+o1jx5yVyAUomHynP6wulm5aziNc5kWdsRE9BE8= shadowrylander@syvl.org" ((:results . "replace") (:exports . "code") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") (:session . "none")) "" "ssh-pubkey-shadowrylander-ecdsa" 298570 "(ref:%s)") ("text" "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4zqEt/Fkjw0LVQTwJXlovmnqqGWC4UOVPvoLDvo0JD6WeVBDi4cFPX2mpNJYmYJsBLDXeUq5XrQ1ST3BkfVdspsragnD7O92tTEf3/VHfIC1L165pnB08FXQrtIjyLL7Ry4dloUGBYKLnHOtnXlpefKMQzRYUacc7Tr1o2wv+XRoDW9h+qDqJz1O61N68JFLgJWD3/nUkm8siTg1OLvqO9ATp+UgP/Lb08E6HfqYOiD8H+1ZJjz78mo5oZatknvgy8uJJPqEX7/aRM61YA9TG+tw/sf6wlrDtUQUik8Y4k1DLmkhE15wcgq/HF2Rqka/acA9GxA5smNGyjs6CS+H jeet.ray@syvl.org" ((:results . "replace") (:exports . "code") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") (:session . "none")) "" "ssh-pubkey-jeet-ray-rsa" 298103 "(ref:%s)") ("text" "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICor+WXoAypnk5rkgTljAN6kk8olvKWqtnmGWVuQu8z9 jeet.ray@syvl.org" ((:results . "replace") (:exports . "code") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") (:session . "none")) "" "ssh-pubkey-jeet-ray-ed25519" 297944 "(ref:%s)") ...) "html-head" (("html" "</div>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6772 "(ref:%s)") ("html" "<a href=\"https://index.syvl.org\">Index</a>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6681 "(ref:%s)") ("html" "<a href=\"https://resume.syvl.org\">Résumé</a>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6596 "(ref:%s)") ("html" "<a href=\"\">About Syvlorg</a>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6526 "(ref:%s)") ("html" "<a href=\"\">About This Website</a>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6449 "(ref:%s)") ("html" "<a href=\"\">About Me</a>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6377 "(ref:%s)") ("html" "<div class=\"header\">
<h1>We Are Syvlorg.</h1>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6282 "(ref:%s)") ("html" "<script>hljs.highlightAll();</script>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6204 "(ref:%s)") ("html" "<script src=\"https://combinatronics.com/sylvorg/settings/main/src/scripts/highlight/highlight.min.js\"></script>" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 6064 "(ref:%s)") ("html" "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://combinatronics.com/sylvorg/settings/main/src/styles/highlight/paraiso-dark.min.css\" />" ((:results . "replace") (:exports . "code") (:noweb-ref . "html-head") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 5571 "(ref:%s)") ...) "syvl.css" (("css" "/* @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro:200,300,400'); */

:root {
    --font-size-1: 2rem;
    --font-size-2: 1.5rem;
    --font-size-3: 1.25rem;
    --font-size-4: 1rem;
    --font-size-small: 0.5rem;
    --font-size-xsmall: 0.25rem;
    --margins: 5rem;
    --smaller-margins: 2.5rem;
    --padding: 1rem;
    --header-padding: 0.25rem;
    --background-color: #222222;
    --dracula-orange: #ffb86c;
    --exo-ui-red: #ff5156;
    --joker-purple: #be80ff;
    --acid-green: #DFFF00;
}

.header {
    text-align: center;
    background: var(--background-color);
    font-size: var(--font-size-3);
    border-bottom: 1px solid var(--dracula-orange);
    padding-bottom: var(--padding);
}

/* More information [[https://developer.mozilla.org/en-US/docs/Web/CSS/:not][here]]: */
.header>a:not(:last-child)::after {
    content: \" |\";
}

.header > a:link {
    color: var(--joker-purple);
    display: inline;
    text-decoration: none;
}

html,
body {
    background-color: var(--background-color);
    font-family: \"Courier New\", monospace;
    font-weight: 100;
    color: var(--joker-purple);
}

@media only screen and (min-width: 750px) /* Large screens */
{
    html,
    body {
        margin-left: var(--margins);
        margin-right: var(--margins);
    }
}

@media only screen and (max-width: 750px) /* Small screens */
{
    html,
    body {
        margin-left: var(--smaller-margins);
        margin-right: var(--smaller-margins);
    }
}

::selection {
    background-color: var(--dracula-orange);
    color: var(--background-color);
}

h1 {
    font-size: var(--font-size-1);
}

h2 {
    font-size: var(--font-size-2);
}

h1>.subtitle,
h3,
h4,
h5 {
    font-size: var(--font-size-3);
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-weight: 300;
    letter-spacing: -0.03em;
    color: var(--dracula-orange);
}

h2,
h3,
h4,
h5,
h6 {
    border-bottom: 1px solid var(--joker-purple);
    width: fit-content;
    padding-bottom: var(--header-padding);
}

#table-of-contents {
    padding-bottom: var(--padding);
    border-bottom: 1px solid var(--dracula-orange);
}

#table-of-contents ul,
#table-of-contents li {
    list-style-type: none;
    margin-top: var(--header-padding);
    margin-bottom: var(--header-padding);
}

#table-of-contents .tag {
    float: right;
}

#table-of-contents a:link {
    text-decoration: none;
    color: var(--joker-purple);
}

#table-of-contents a:hover {
    color: var(--exo-ui-red);
}

img {
    max-width: 100%;
}

blockquote {
    border-left: 0.2rem solid var(--dracula-orange);
    padding-left: 1rem;
    font-style: italic;
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
blockquote>p {
    color: var(--exo-ui-red);
}

p,
pre,
ol,
ul,
table,
code {
    color: var(--dracula-orange);
}

.done,
.priority,
.tag,
.todo,
code {
    color: var(--background-color);
    position: relative;
    bottom: .1rem;
    font-size: 80%;
}

.done,
.priority,
.todo,
code {
    font-weight: 400;
    background-clip: padding-box;
    font-family: \"Courier New\", monospace;
    font-weight: bold;
    line-height: 1
}

.done,
.priority,
.tag>span,
.todo,
code {
    border-radius: 3px;
    padding-top: .1rem;
    padding-left: .3rem;
    padding-right: .3rem;
    line-height: 1;
}

.priority,
.tag>span,
.todo,
code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--exo-ui-red));
}

td > code {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

/* ~.on>code~ refers to a checkbox's checked state; ~.off>code~ refers to the opposite. */
.on>code,
.done {
    background-image: linear-gradient(160deg, var(--dracula-orange), var(--joker-purple));
}

.tag {
    top: .1rem;
    display: block;
    float: right;
    font-weight: 550;
}

.tag>span {
    text-transform: uppercase;
}

table,
#table-of-contents {
    margin-bottom: var(--padding);
}

/* Even Table Row */

tr:nth-child(even) {
    background-color: #2f1e2e;
}

.org-org-meta-line,
.org-keyword {
    color: var(--dracula-orange);
}

a:link,
a:hover,
a:visited,
a:visited:hover {
    text-decoration: none;
}

a:link {
    color: var(--acid-green);
}

a:visited {
    color: var(--joker-purple);
}

/* Adapted from [[https://stackoverflow.com/users/3246606/harry-the-mad-lurker][Harry The Mad Lurker's]] answer [[https://stackoverflow.com/a/21977877/10827766][here]]: */
a:hover,
a:visited:hover {
    color: var(--exo-ui-red);
}

/* Adapted from [[https://css-tricks.com/forums/topic/need-help-to-override-font-color-for-blockquote/#post-99908][here]], and [[https://stackoverflow.com/users/3444240/potashin][potashin's]] answer [[https://stackoverflow.com/a/23631478/10827766][here]]: */
#postamble :not(:last-child)::after {
    content: \" |\";
}

#postamble>p {
    display: inline;
}

#postamble {
    text-align: center;
    width: 100%;
    font-size: var(--font-size-4)
}

.status {
    padding: var(--padding);
    border-top: 1px solid var(--dracula-orange);
    text-align: center;
}

.outline-text-2,
.outline-text-3,
.outline-text-4 {
    max-width: 100%;
    overflow-x: auto;
}

.underline {
    text-decoration: var(--exo-ui-red) wavy underline;
}

del {
    text-decoration: var(--joker-purple) wavy line-through;
}" ((:results . "replace") (:exports . "code") (:noweb-ref . "syvl.css") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:tangle . "no") (:hlines . "no") ...) "" nil 21734 "(ref:%s)")) "11788ba8-f3e9-4122-8cb4-d4c18d4f031d" (("emacs-lisp" "(defun meq/org-html-format-headline-default-function
    (todo _todo-type priority text tags info)
  \"Default format function for a headline.
See `org-html-format-headline-function' for details.\"
  (let ((todo (org-html--todo todo info))
        (priority (org-html--priority priority info))
        (tags (org-html--tags tags info)))
    (concat todo (and todo \" \")
            priority (and priority \" \")
            text
            (and tags \"&#xa0;\") tags)))
(advice-add #'org-html-format-headline-default-function :override #'meq/org-html-format-headline-default-function)" ((:results . "replace") (:exports . "code") (:noweb-ref . "11788ba8-f3e9-4122-8cb4-d4c18d4f031d") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 57292 "(ref:%s)") ("emacs-lisp" "(defun meq/org-html-inline-src-block (inline-src-block _contents info)
  \"Transcode an INLINE-SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information.\"
  (let* ((lang (org-element-property :language inline-src-block))
         (code (org-html-fontify-code
                (org-element-property :value inline-src-block)
                lang))
         (label
          (let ((lbl (org-html--reference inline-src-block info t)))
            (if (not lbl) \"\" (format \" id=\\\"%s\\\"\" lbl)))))
    (format \"<code class=\\\"language-%s match-braces rainbow-braces\\\"%s>%s</code>\" lang label code)))
(advice-add #'org-html-inline-src-block :override #'meq/org-html-inline-src-block)" ((:results . "replace") (:exports . "code") (:noweb-ref . "11788ba8-f3e9-4122-8cb4-d4c18d4f031d") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 56430 "(ref:%s)") ("emacs-lisp" "(defun meq/org-html-src-block (src-block _contents info)
  \"Transcode a SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information.\"
  (if (org-export-read-attribute :attr_html src-block :textarea)
      (org-html--textarea-block src-block)
    (let* ((lang (org-element-property :language src-block))
           (lang (cond ((member lang '(\"emacs-lisp\")) \"lisp\")
                       ((member lang '(\"shell\" \"zsh\" \"bash\")) \"sh\")
                       ((member lang '(\"text\")) \"plaintext\")
                       (t lang)))
           (code (org-html-format-code src-block info))
           (label (let ((lbl (org-html--reference src-block info t)))
                    (if lbl (format \" id=\\\"%s\\\"\" lbl) \"\")))
           (klipsify  (and  (plist-get info :html-klipsify-src)
                            (member lang '(\"javascript\" \"js\"
                                           \"ruby\" \"scheme\" \"clojure\" \"php\" \"html\")))))
      (if (not lang) (format \"<pre class=\\\"example\\\"%s>\\n%s</pre>\" label code)
        (format \"<div class=\\\"org-src-container\\\">\\n%s%s\\n</div>\"
                ;; Build caption.
                (let ((caption (org-export-get-caption src-block)))
                  (if (not caption) \"\"
                    (let ((listing-number
                           (format
                            \"<span class=\\\"listing-number\\\">%s </span>\"
                            (format
                             (org-html--translate \"Listing %d:\" info)
                             (org-export-get-ordinal
                              src-block info nil #'org-html--has-caption-p)))))
                      (format \"<label class=\\\"org-src-name\\\">%s%s</label>\"
                              listing-number
                              (org-trim (org-export-data caption info))))))
                ;; Contents.
                (if klipsify
                    (format \"<pre><code class=\\\"src src-%s\\\"%s%s>%s</code></pre>\"
                            lang
                            label
                            (if (string= lang \"html\")
                                \" data-editor-type=\\\"html\\\"\"
                              \"\")
                            code)
                  (format \"<pre><code class=\\\"language-%s match-braces rainbow-braces\\\"%s>%s</code></pre>\"
                          lang label code)))))))
        (advice-add #'org-html-src-block :override #'meq/org-html-src-block)" ((:results . "replace") (:exports . "code") (:noweb-ref . "11788ba8-f3e9-4122-8cb4-d4c18d4f031d") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 53696 "(ref:%s)") ("emacs-lisp" "(load-file (meq/oefd \"org-tangle-functions.el\"))" ((:results . "replace") (:exports . "code") (:noweb-ref . "11788ba8-f3e9-4122-8cb4-d4c18d4f031d") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 53342 "(ref:%s)") ("emacs-lisp" "(setq org-export-functions-directory (file-name-directory (or load-file-name buffer-file-name))
      windows (member system-type '(windows-nt ms-dos)))
(defun meq/oefd (&rest args) (apply #'concat org-export-functions-directory (mapcar #'(lambda (arg) (concat (if windows \"\\\\\" \"/\") arg)) args)))" ((:results . "replace") (:exports . "code") (:noweb-ref . "11788ba8-f3e9-4122-8cb4-d4c18d4f031d") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" "777bbfd5-1d72-49ff-89d6-b3e7e8fc7609" 52847 "(ref:%s)")) "c2b376ba-f828-4ab9-8379-234a382c279e" (("emacs-lisp" "    (setq org-src-preserve-indentation t)
    ;; (let* ((headlines (a-get org-elements :headlines))
    ;;         (keywords (a-get org-elements :keywords)))
    ;;     (unless (or (a-has-key? keywords \"nolobfile\") (a-has-key? keywords \"nosetuplobfile\") (member \"no lobfile\" headlines))
    ;;       (let* ((file (get-README nil nil (cond ((a-has-key? keywords \"setuplobfile\") (a-get keywords \"setuplobfile\"))
    ;;                                         ((a-has-key? keywords \"lobfile\") (a-get keywords \"lobfile\"))))))
    ;;         (when file (org-babel-lob-ingest file)))))
    (let* ((file (get-README))) (when file (org-babel-lob-ingest file)))
    (org-export-expand-include-keyword))

(mapc (lambda (hook) (interactive) (add-hook hook 'org-babel-pre-tangle-hooks)) '(org-babel-pre-tangle-hook org-export-before-processing-hook))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 290598 "(ref:%s)") ("emacs-lisp" "        (unless (or (a-has-key? keywords \"nosetupfile\") (a-has-key? keywords \"nosetuplobfile\") (member \"no setupfile\" headlines))
            (goto-char 0)
            (insert (format \"#+setupfile: %s\\n\\n\" (get-README 'return-link (when (a-has-key? keywords \"setuplobfile\") (a-get keywords \"setuplobfile\")))))
            (goto-char 0)
            (org-ctrl-c-ctrl-c))
        (a-list :keywords keywords :headlines headlines)))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 289627 "(ref:%s)") ("emacs-lisp" "            (keywords (org-element-map
                        (org-element-parse-buffer 'element)
                        'keyword
                        (lambda (keyword) (cons (downcase (org-element-property :key keyword)) (org-element-property :value keyword))))))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 289323 "(ref:%s)") ("emacs-lisp" "            (headlines (org-element-map
                        (org-element-parse-buffer 'headline)
                        'headline
                        (lambda (headline) (downcase (org-element-property :title headline)))))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 288944 "(ref:%s)") ("emacs-lisp" "(defun get-README (&optional return-link setupfile lobfile) (interactive)
    (let* ((README (f-join \"settings\" \"README.org\"))
        ;; (settings-README (f-expand (s-chop-prefix \"/\" (f-join (org-format-outline-path (org-get-outline-path)) \"README.org\"))))
        (flake-settings (s-trim (shell-command-to-string \"nix eval --impure --expr \\\"((builtins.getFlake or import) (toString ./.)).inputs.settings.outPath\\\" | tr -d '\\\"' 2> /dev/null\")))
        (flake-README (unless (s-blank? flake-settings) (f-expand (f-join flake-settings \"README.org\"))))
        (repo-README (f-expand README))
        (home-README (f-expand (f-join \"~\" README)))
        (user-README (f-expand (f-join \"/home/shadowrylander/aiern\" README)))
        (root-README (f-expand (f-join \"/\" README)))
        (env (getenv \"SETTINGS_README\"))
        (env-README (unless (s-blank? env) (f-expand (substitute-in-file-name env))))
        (file (or 
                ;;   (when setupfile (f-expand setupfile))
                ;;   (when lobfile (f-expand lobfile))
                  (cond
                    ((f-exists? README) (concat \"./\" README))
                    ;; ((f-exists? settings-README) settings-README)
                    ((f-exists? flake-README) flake-README)
                    ((f-exists? repo-README) repo-README)
                    ((f-exists? home-README) home-README)
                    ((f-exists? user-README) user-README)
                    ((f-exists? root-README) root-README)
                    ((unless (s-blank? env) (f-exists? env-README)) env-README)
                    (t (if return-link
                        \"https://raw.githubusercontent.com/sylvorg/settings/main/README.org\"
                        (let* ((curl-README (shell-command-to-string \"curl -fsSL https://raw.githubusercontent.com/sylvorg/settings/main/README.org 2> /dev/null\")))
                            (unless (s-blank? curl-README)
                                (let* ((temp (make-temp-file (uuidgen-5 (uuidgen-4) (uuidgen-4)))))
                                    (f-write curl-README 'utf-8 temp)
                                    temp)))))))))
    file))

(defun org-babel-pre-tangle-hooks nil (interactive)
    (setq org-elements (let* (" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 286532 "(ref:%s)") ("emacs-lisp" "(defun meq/get-header nil (nth 4 (org-heading-components)))
(defun meq/get-theme-from-header nil (s-chop-suffix \"-theme.el\" (meq/get-header)))

(defun meq/tangle-multi (light dont-check-car &rest paths)
    (mapc (lambda (path) (let* ((body (meq/org-babel-expand (f-expand (substitute-in-file-name path)) nil light)))
                            (if body (f-write body 'utf-8 path)))) (cdr paths))
    (meq/org-babel-expand (f-expand (substitute-in-file-name (car paths))) t light dont-check-car))

(defun meq/tangle-path (&optional light)
    (meq/org-babel-expand (s-chop-prefix \"/\" (f-join (org-format-outline-path (org-get-outline-path)) (meq/get-header))) t light))
(defun meq/tangle-multipath (&rest paths) (apply #'meq/tangle-multi nil 'dont-check-car (add-to-list 'paths (meq/tangle-path))))
(defun meq/tangle-multipath-light (&rest paths) (apply #'meq/tangle-multi 'light 'dont-check-car (add-to-list 'paths (meq/tangle-path t))))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 285558 "(ref:%s)") ("emacs-lisp" "(defun meq/get-block (name &optional light parent-buffer datum params)
    (let* (path return-path no-check body)
        (meq/org-babel-expand path return-path light no-check body (org-babel-lob--src-info name) parent-buffer datum params)))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 285282 "(ref:%s)") ("emacs-lisp" "                    (if return-path \"no\")
                    path-or-body)
                path-or-body)
            path-or-body)))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 284633 "(ref:%s)") ("emacs-lisp" "                (if (string= body (if return-path (apply #'meq/org-babel-expand-src-block args) path-or-body))" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 284488 "(ref:%s)") ("emacs-lisp" "(defun meq/org-babel-expand (path &optional return-path light no-check body info parent-buffer datum params)
    (let* ((exists (and path (f-exists? path)))
            (body (if exists (s-trim (f-read path)) body))
            (args (list light datum info params))
            (path-or-body (if return-path path (apply #'meq/org-babel-expand-src-block args))))
        (if (and (not no-check) body)
            (if exists" ((:results . "replace") (:exports . "code") (:noweb-ref . "c2b376ba-f828-4ab9-8379-234a382c279e") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 283936 "(ref:%s)") ...) "no" (("emacs-lisp" "    (require 'org-id)
    (setq org-id-locations-file (meq/oefd \".org-id-locations\")
            org-id-files (list load-file-name
                                buffer-file-name
                                (meq/oefd \"README.org\"))
            org-id-link-to-org-use-id t)
    (org-id-update-id-locations)" ((:results . "replace") (:exports . "code") (:noweb-ref . "no") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 290239 "(ref:%s)")) "101ff611-520c-4c0b-ad0c-01937a1250e5" (("emacs-lisp" "        (org-babel-execute-buffer)))" ((:results . "replace") (:exports . "code") (:noweb-ref . "101ff611-520c-4c0b-ad0c-01937a1250e5") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 294784 "(ref:%s)") ("emacs-lisp" "\":\"; exec emacs --quick --script \"$0\" -- \"$@\" # -*- mode: emacs-lisp; lexical-binding: t; -*-
(pop argv)

(require 'org-element)

(defun require-lang (lang)
    (defvar bootstrap-version)
    (let ((bootstrap-file
        (expand-file-name \"straight/repos/straight.el/bootstrap.el\" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            \"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el\"
            'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
    (pcase (downcase lang)
        ((or \"hy\" \"hylang\") (use-package ob-hy :demand t :straight '(ob-hy :type git :host github :repo \"allison-casey/ob-hy\") :init (setq org-babel-hy-command \"/usr/bin/env hy\")))))

(defun message-advice (func &rest args) (interactive)
    (let* ((*message (apply #'format args)))
        (unless (or (string-prefix-p \"executing\" *message)
                    (string-prefix-p \"Code block\" *message))
            (apply func args))))
(advice-add #'message :around #'message-advice)

(defun org-babel-eval-error-notify-advice (exit-code stderr)
  \"Open a buffer to display STDERR and a message with the value of EXIT-CODE.\"
  (let ((buf (get-buffer-create org-babel-error-buffer-name)))
    (with-current-buffer buf
      (goto-char (point-max))
      (save-excursion (insert stderr))
      (message (buffer-string)))
    (display-buffer buf))
  (message \"Babel evaluation exited with code %S\" exit-code))
(advice-add #'org-babel-eval-error-notify :override #'org-babel-eval-error-notify-advice)

(let ((org-confirm-babel-evaluate)
        (lang-list '()))
    (with-temp-buffer
        (while argv
            (let ((arg (pop argv)))
                (pcase arg
                    ((or \"-l\" \"--languages\")
                        (while (and (> (length argv) 1) (not (string-prefix-p \"-\" (car argv))))
                            (add-to-list 'lang-list (pop argv) t)))
                    (_ (setq file arg)))))
        (insert-file-contents file)
        (mapc 'require-lang lang-list)" ((:results . "replace") (:exports . "code") (:noweb-ref . "101ff611-520c-4c0b-ad0c-01937a1250e5") (:cache . "yes") (:mkdirp . "yes") (:noweb . "yes") (:tangle-mode . "(identity #o444)") (-n . "-r -l \"[{(<%s>)}]\"") (:lexical . "no") (:tangle . "no") ...) "" nil 292384 "(ref:%s)")) ...))
